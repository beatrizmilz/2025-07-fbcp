---
title: "Dia 1 - Conhecendo o ggplot2"
---

::: {.callout-warning}
Página em construção.
:::

## Carregando pacotes

O pacote `tidyverse` é um conjunto de pacotes, e nele encontramos pacotes úteis para essa oficina, como o `readr`, `dplyr` e `ggplot2`. Vamos carregá-lo:

```{r}
library(tidyverse)
```


## Importando dados

Nesta oficina, utilizaremos dados das eleições municipais de 2024 em São Paulo. Os dados foram baixados do portal de dados abertos do TSE e estão disponíveis no repositório do curso.

```{r}
dados_candidatos <- read_csv2("https://raw.githubusercontent.com/beatrizmilz/2025-07-fbcp/refs/heads/main/intro-r/dados/candidatos_muni_sp.csv")
```

```{r}
bens_candidatos <- read_csv2("https://raw.githubusercontent.com/beatrizmilz/2025-07-fbcp/refs/heads/main/intro-r/dados/bens_candidatos_muni_sp.csv")
```

```{r}
votos_vereadores <- read_csv2("https://raw.githubusercontent.com/beatrizmilz/2025-07-fbcp/refs/heads/main/intro-r/dados/votos_vereadores_muni_sp.csv")
```

Vamos juntar os dados de bens dos candidatos com os dados de votos dos vereadores. Para isso, vamos calcular a soma dos valores dos bens de cada candidato e depois juntar com os dados de votos.

```{r}
soma_bens_por_candidato <- bens_candidatos |> 
  group_by(SQ_CANDIDATO) |> 
  summarise(
    soma_valor_bens = sum(VR_BEM_CANDIDATO, na.rm = TRUE),
    .groups = "drop"
  ) 

votos_vereadores_e_bens <- votos_vereadores |> 
  left_join(soma_bens_por_candidato, by = "SQ_CANDIDATO")
```


## O que é o ggplot2?

O `ggplot2` é o principal pacote para criação de gráficos em R. Ele é baseado na [gramática de gráficos](https://link.springer.com/book/10.1007/0-387-28695-0), uma teoria que apresenta uma forma de descrever os componentes de um gráfico.

O `ggplot2` faz parte do [tidyverse](https://www.tidyverse.org/).

## Vocabulário do ggplot2

A gramática de gráficos é composta por alguns elementos, sendo os seguintes principais para iniciar:

-   **Dados**: um data frame que contém os dados que serão apresentados

-   ***Aesthetics*** **(atributos estéticos)**: mapeamento dos dados para propriedades visuais do gráfico, como eixos, cor, forma e tamanho

-   **Geometrias**: formas geométricas que representam os dados, como pontos, linhas e barras.

Vamos fazer um exemplo simples, explorando cada um desses elementos. Para iniciar o gráfico, podemos informar os dados para a função `ggplot()`:

```{r}
#| label: exemplo-ggplot2-1
#| code-annotations: below
votos_vereadores_e_bens |>
  ggplot()
```

A função `ggplot()` cria um objeto gráfico vazio. Para informar quais são as variáveis que serão mapeadas nos eixos `x` e `y`, utilizamos a função `aes()`:

```{r}
#| label: exemplo-ggplot2-2
#| code-annotations: below
votos_vereadores_e_bens |>
  # recortando apenas as 10 primeiras linhas
  head(10) |> 
  ggplot() + 
  aes(x = SOMA_QT_VOTOS_NOMINAIS_VALIDOS, y = NM_CANDIDATO)
```

O gráfico criado apresenta os eixos, e os valores possíveis. Porém ainda não tem nenhuma geometria para representar os dados. Para adicionar uma geometria ao gráfico, utilizamos funções da família `geom_*`. Nesse caso, vamos utilizar a função `geom_col()` para criar um gráfico de colunas:

```{r}
#| label: exemplo-ggplot2-3
votos_vereadores_e_bens |>
  head(10) |> 
  ggplot() + 
  aes(x = SOMA_QT_VOTOS_NOMINAIS_VALIDOS, y = NM_CANDIDATO) + 
  geom_col() 
```
O gráfico acima apresenta a soma de votos nominais válidos dos 10 primeiros candidatos a vereador mais votados na cidade de São Paulo. Existem alguns problemas nesse gráfico, como a ordem dos candidatos no eixo `y`, que não está adequada (está em ordem alfabética). Vamos descobrir como melhorar isso ao longo da oficina.

1.  **Dados:** dados que serão utilizados
2.  `ggplot()`: função para iniciar o gráfico
3.  ***Aesthetics*** **(atributos estéticos)**: informando quais variáveis serão utilizadas nos eixos x e y
4.  **Geometria do gráfico:** informando que faremos um gráfico de colunas

::: callout-tip
**Atenção:** Observe que a cada linha de código, adicionamos um `+` para adicionar um novo elemento ao gráfico.

A partir da função `ggplot()`, sempre utilizamos `+` para adicionar novos elementos ao gráfico.
:::



## Criando gráficos exploratórios

Vamos criar alguns gráficos exploratórios com os dados de .....

Gráficos exploratórios são utilizados para entender melhor os dados, identificar padrões e tendências, e verificar a presença de outliers. Neste momento, não estamos preocupados com a estética do gráfico, mas sim com a interpretação dos dados.

### Tipos de gráficos

#### Gráficos de dispersão

Vamos começar criando um gráfico de dispersão (conhecido também como gráfico de pontos). Para isso, utilizaremos a função `ggplot()` e a função `geom_point()`.

O gráfico de dispersão é utilizado para visualizar a relação entre duas variáveis quantitativas (ou numéricas).


```{r}
#| label: exemplo-ggplot2-dispersao
votos_vereadores_e_bens |>
  ggplot() +
  aes(x = soma_valor_bens, y = SOMA_QT_VOTOS_NOMINAIS_VALIDOS) +
  geom_point()
```

#### Gráficos de linha

Gráficos de linha são muito utilizados para representar uma variável ao longo do tempo. A função de geometria utilizada é a `geom_line()`.

Os dados que temos de votos dos vereadores não possuem uma variável de tempo,

```{r}
#| label: exemplo-ggplot2-linha
# TO DO
```

E se quisermos ver para todos os estados? Nesse caso, é importante usar um argumento adicional na função `aes()`, o `group`, para que o `ggplot2` saiba que queremos uma linha para cada estado.

```{r}
#| label: exemplo-ggplot2-linha-todos-estados
#| eval: false
dados |> 
  ggplot() + 
  aes(..) + 
  geom_line(aes(group = uf))
```

### Combinando geometrias

Podemos combinar diferentes geometrias no mesmo gráfico. Por exemplo, podemos adicionar um gráfico de pontos ao gráfico de linhas que criamos anteriormente:

```{r}
#| label: exemplo-ggplot2-linha-ponto
dados |> 
  filter(uf_sigla == "BA") |> 
  ggplot() + 
  aes(x = trimestre_inicio, y = perc_desocupacao) + 
  geom_line(color = "red") +
  geom_point(color = "blue")
```

Outro ponto importante é que a **ordem das geometrias importa**! No exemplo acima, a linha é desenhada primeiro, e os pontos são adicionados por cima da linha. Se trocarmos a ordem das geometrias, os pontos serão desenhados primeiro, e a linha será desenhada por cima dos pontos.

```{r}
#| label: exemplo-ggplot2-ponto-linha
dados |> 
  filter(uf_sigla == "BA") |> 
  ggplot() + 
  aes(x = trimestre_inicio, y = perc_desocupacao) + 
  geom_point(color = "blue") +
  geom_line(color = "red")
```

### Gráficos de barras/colunas

Para os gráficos de barras/colunas, podemos utilizar duas funções: `geom_bar()` e `geom_col()`. A diferença entre elas é que `geom_bar()` é utilizada quando queremos contar a frequência de uma variável categórica, enquanto `geom_col()` é utilizada quando queremos visualizar uma variável numérica.

Vamos criar um gráfico de colunas para visualizar a taxa de desocupação dos estados no trimestre mais recente. Como já temos a coluna com o valor numérico que queremos visualizar (`perc_desocupacao`), utilizaremos a função `geom_col()`:

```{r}
#| label: exemplo-ggplot2-geom-col
dados_tri_recente |> 
  ggplot() + 
  aes(y = uf, x = perc_desocupacao) + 
  geom_col()
```

A função `geom_bar()` é utilizada para representar **contagens**. Vamos responder a seguinte pergunta de exemplo: quantas vezes cada estado apresentou uma taxa de desocupação maior ou igual à 20%? Para isso, precisamos filtrar os dados **antes** de criar o gráfico, e a função `geom_bar()` será utilizada para contar a frequência de cada estado. Os estados que não aparecerem no gráfico é porque não tiveram nenhuma taxa de desocupação maior ou igual à 20%, no período que temos dados.

```{r}
#| label: exemplo-ggplot2-geom-bar
dados |> 
  filter(perc_desocupacao >= 20) |>
  ggplot() + 
  aes(x = uf) + 
  geom_bar()
```

### Gráfico de histograma

O histograma é um gráfico que mostra a distribuição de uma variável numérica. A função de geometria utilizada é a `geom_histogram()`.

Podemos visualizar a distribuição da variável `perc_desocupacao`, considerando todos os trimestres:

```{r}
#| label: exemplo-ggplot2-histogram
votos_vereadores_e_bens |> 
  ggplot() + 
  aes(x = soma_valor_bens) + 
  geom_histogram()
```

Outro tipo de gráfico que pode ser utilizado para visualizar a distribuição de uma variável numérica é o gráfico de densidade. A função de geometria utilizada é a `geom_density()`.

```{r}
#| label: exemplo-ggplot2-density
votos_vereadores_e_bens |> 
  ggplot() + 
  aes(x = soma_valor_bens) + 
  geom_density()
```

### Gráficos de caixa (*boxplot*)

O gráfico de caixa[^1] (mais conhecido como *boxplot*) é utilizado para visualizar a distribuição de uma variável numérica. Esse é um tipo de gráfico que não é muito comum vermos no dia-a-dia, mas é muito usado em pesquisas e análises estatísticas.

[^1]: Caso queira saber mais sobre o gráfico de caixa / *boxplot*, [recomendo a leitura deste texto escrito pela Fernanda Peres, sobre como interpretar o boxplot](https://fernandafperes.com.br/blog/interpretacao-boxplot/).

Este gráfico apresenta informações como a mediana, quartis, valores mínimos e máximos, e possíveis outliers.

Para criar um boxplot, utilizaremos a função de geometria `geom_boxplot()`

```{r}
#| label: exemplo-ggplot2-boxplot
votos_vereadores_e_bens |> 
  ggplot() + 
  aes(x = soma_valor_bens) + 
  geom_boxplot()
```

### Gráficos por subgrupos

#### Subgrupos por Cor

Podemos adicionar mais uma variável ao gráfico, utilizando a cor para representá-la. Para isso, utilizamos os argumentos `fill` ou `color` dentro da função `aes()`:

-   `fill`: preenche a área com a cor. Útil para gráficos de barras e colunas, por exemplo.
-   `color`: adiciona a cor ao contorno. Útil para gráficos de linhas e pontos, por exemplo.

Vamos ver um exemplo de gráfico de colunas apresentado anteriormente, com preenchimento (`fill`) por região:

```{r}
#| label: exemplo-ggplot2-fill
dados_tri_recente |>
  ggplot() + 
  aes(x = perc_desocupacao, y = uf) + 
  geom_col(aes(fill = regiao)) # <1>
```
1.  Adicionando a cor de preenchimento utilizando a coluna `regiao`, com o argumento `fill`. Isso precisa estar **DENTRO** do `aes()`.

Vamos ver um exemplo de gráfico de linhas apresentado anteriormente, adicionamos pontos e usamos a cor para representar o período que consideramos como pandemia (`color`):

```{r}
#| label: exemplo-ggplot2-linha-color
dados |> 
  filter(uf_sigla == "BA") |> # <1>
  mutate(periodo_pandemia = as.character(periodo_pandemia)) |>
  ggplot() + 
  aes(x = trimestre_inicio, y = perc_desocupacao) + 
  geom_line() +
  geom_point(aes(color = periodo_pandemia)) # <2>
```
1.  Filtrando dados para representar apenas a Bahia.
2.  Adicionando a cor do ponto utilizando a coluna `periodo_pandemia`, com o argumento `color`. Isso precisa estar **DENTRO** do `aes()`.

#### Subgrupos por Facetas (*facet*)

As facetas (ou *facet*) são utilizadas para dividir o gráfico em subgráficos, com base nos valores de uma ou duas variáveis categóricas.

Existem duas funções principais para criar facetas: `facet_wrap()` ou `facet_grid()`.

A função `facet_wrap()` cria uma faceta para cada categoria da variável:

```{r}
#| label: exemplo-ggplot2-facet-wrap
dados |> 
  ggplot() + 
  aes(x = trimestre_inicio, y = perc_desocupacao) + 
  geom_line(aes(group = uf)) + 
  facet_wrap(~regiao) # <1>
```

1.  Adicionando a função `facet_wrap()` para criar um gráfico para cada categoria da variável `regiao`.

Veja que o gráfico é dividido em 5 subgráficos, um para cada região do Brasil. Os valores dos eixos `x` e `y` são os mesmos para todos os subgráficos, possibilitando a comparação entre eles.

Já a função `facet_grid()` cria um gráfico para cada combinação de categorias de duas variáveis.

```{r}
#| label: exemplo-ggplot2-facet-grid
dados |> 
  ggplot() + 
  aes(y = perc_desocupacao) + 
  geom_boxplot() + 
  facet_grid(regiao ~ periodo_pandemia) # <1>
```

1.  Adicionando a função `facet_grid()` para criar um gráfico para cada combinação de categorias das variáveis `regiao` e `periodo_pandemia`.

### Revisão

A partir dos exemplos apresentados, podemos listar alguns pontos importantes sobre o `ggplot2`:

-   A função `ggplot()` cria um objeto gráfico vazio

-   Podemos usar o pipe (`%>%` ou `|>`) para encadear as funções **até** a função `ggplot()`.

-   A partir da função `ggplot()`, não usamos mais o pipe (`%>%` ou `|>`), e sim o `+`.

-   A função `aes()` define o mapeamento estético (aesthetics mapping) entre as colunas da base de dados (variáveis) e os elementos visuais do gráfico (eixo, posição, cor, tamanho, etc).

-   Os atributos estéticos (`aes`) `x` e `y` representam os eixos `x` e `y` do gráfico.

-   Para adicionar uma geometria ao gráfico, usamos alguma função da família `geom_*`.

-   Podemos usar mais do que uma geometria no mesmo gráfico, e a ordem importa!


## Visualizando os dados

Para quem está começando, recomendo utilizar o pacote `esquisse`, que facilita a criação de gráficos com o `ggplot2`.

```{r}
#| eval: false
install.packages("esquisse", dependencies =  TRUE)
```

Depois de instalar o pacote, podemos carregá-lo e utilizar a função `esquisser()` para criar gráficos interativos:

```{r}
#| eval: false
library(esquisse)
esquisser(dados)
```

O `esquisse` oferece uma interface amigável para criar gráficos com o `ggplot2`, permitindo que você arraste e solte variáveis, escolha tipos de gráficos e customize os elementos do gráfico. Ao usar o `esquisse`, você pode gerar o código correspondente ao gráfico que está criando, e depois copiá-lo para o seu script R.


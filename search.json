[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Oficinas de R - IX FBCP",
    "section": "",
    "text": "Boas vindas!\nOlá! Este site contém os materiais para as duas oficinas de R que serão oferecidas durante o IX Fórum Brasileiro de Pós-Graduação em Ciência Política:\nLocal: Faculdade de Filosofia, Letras e Ciências Humanas (FFLCH-USP)",
    "crumbs": [
      "Boas vindas!"
    ]
  },
  {
    "objectID": "index.html#ministrante",
    "href": "index.html#ministrante",
    "title": "Oficinas de R - IX FBCP",
    "section": "Ministrante",
    "text": "Ministrante\nBeatriz Milz  Pesquisadora Colaboradora | Estágio pós-doutoral  Laboratório de Planejamento Territorial (LaPlan) - Universidade Federal do ABC (UFABC)  Email | GitHub | LinkedIn | ResearchGate | Currículo Lattes | Orcid",
    "crumbs": [
      "Boas vindas!"
    ]
  },
  {
    "objectID": "index.html#materiais-complementares",
    "href": "index.html#materiais-complementares",
    "title": "Oficinas de R - IX FBCP",
    "section": "Materiais complementares",
    "text": "Materiais complementares\n\nLivro R para Ciência de Dados 2ed\nLivro Ciência de dados em R\nMateriais do curso Introdução à análise de dados no R\nMaterial da disciplina Análise de Dados para as Ciências Sociais, por Jonathan Phillips.",
    "crumbs": [
      "Boas vindas!"
    ]
  },
  {
    "objectID": "index.html#sobre-este-material",
    "href": "index.html#sobre-este-material",
    "title": "Oficinas de R - IX FBCP",
    "section": "Sobre este material",
    "text": "Sobre este material\n\nLicença\nEsse material está disponível sob a licença CC BY-SA 4.0.",
    "crumbs": [
      "Boas vindas!"
    ]
  },
  {
    "objectID": "instalacao.html",
    "href": "instalacao.html",
    "title": "1  Orientações pré-oficina",
    "section": "",
    "text": "1.1 Instalação do R e RStudio\nPara a utilização do R, é necessário instalar o software R e o RStudio. O R é a linguagem de programação e o RStudio é um ambiente de desenvolvimento integrado (IDE - Integrated Development Environment) que facilita a utilização do R.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Orientações pré-oficina</span>"
    ]
  },
  {
    "objectID": "instalacao.html#instalação-do-r-e-rstudio",
    "href": "instalacao.html#instalação-do-r-e-rstudio",
    "title": "1  Orientações pré-oficina",
    "section": "",
    "text": "Aviso\n\n\n\nAtenção: O R deve ser instalado antes do RStudio.\n\n\n\n1.1.1 Instalação do R\nPara instalar o R, acesse o site CRAN e escolha o link de download de acordo com o seu sistema operacional:\n\n\n\n\n\n\n\nCaptura de tela do site CRAN\n\n\nInstale o R utilizando o instalador baixado.\n\n\n1.1.2 Instalação do RStudio\nApós instalar o R, acesse o site RStudio Desktop e escolha o link de download de acordo com o seu sistema operacional:\n\n\n\n\n\n\n\nCaptura de tela do site RStudio Desktop\n\n\nInstale o RStudio utilizando o instalador baixado.\n\n\n\n\n\n\nDica\n\n\n\nCaso o seu computador tenha limitações para instalação de programas, você pode utilizar o Posit Cloud, uma versão online do RStudio. Entretanto, a versão gratuita do Posit Cloud tem algumas limitações, como limite de tempo de uso (25 horas por mês) e de memória RAM (1 GB).\nO vídeo abaixo apresenta um tutorial sobre como utilizar o Posit Cloud:\n\n\n\n\n\n\n\n\n1.1.3 Verificação da instalação\nPara verificar se a instalação foi realizada com sucesso, abra o RStudio. Para isso, procure o ícone do RStudio no menu de programas do seu sistema operacional.\nA tela inicial do RStudio é semelhante à imagem abaixo:\n\n\n\nCaptura de tela da IDE RStudio\n\n\n\n\n1.1.4 Verificação da versão do R\nCaso você tenha o R instalado previamente, é importante verificar se a versão instalada é recente.\n\n\n\n\n\n\nAviso\n\n\n\nRecomendamos que utilizem o R na versão 4.1.0 ou superior.\nCaso a versão do R seja inferior a 4.1.0, recomendamos que atualizem o R para a versão mais recente.\nVersões mais antigas podem ter incompatibilidades com alguns códigos que utilizaremos durante o curso.\n\n\nExiste mais de uma forma para verificar a versão do R. A forma mais simples é verificando o texto que aparece no painel “Console” ao abrir o RStudio:\n\n\n\nCaptura de tela da IDE RStudio\n\n\nOutra forma é utilizando o comando R.version.string. Para isso, execute o seguinte comando no console do RStudio. Por exemplo, a versão do R utilizada para a elaboração deste material é 4.5.0:\nO comando R.version retorna um objeto com diversas informações sobre a versão do R, o sistema operacional utilizado, etc:\n\nR.version\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          5.0                         \nyear           2025                        \nmonth          04                          \nday            11                          \nsvn rev        88135                       \nlanguage       R                           \nversion.string R version 4.5.0 (2025-04-11)\nnickname       How About a Twenty-Six",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Orientações pré-oficina</span>"
    ]
  },
  {
    "objectID": "intro-r/index.html",
    "href": "intro-r/index.html",
    "title": "Introdução ao R para análise de dados",
    "section": "",
    "text": "Conteúdos\nDescrição: Nesta oficina, será apresentado o ambiente de programação R e o IDE RStudio. A oficina é voltada para iniciantes e não é necessário conhecimento prévio de programação. Durante a oficina, serão abordadas tarefas básicas como iniciar um projeto, importar tabelas, realizar filtros, criar tabelas de resumo (com estatísticas descritivas), e exportar resultados. Esta oficina faz parte de uma trilha de treinamentos voltada para iniciantes, fornecendo uma base para quem deseja aprender a analisar dados com R.",
    "crumbs": [
      "Introdução ao R para análise de dados"
    ]
  },
  {
    "objectID": "intro-r/index.html#conteúdos",
    "href": "intro-r/index.html#conteúdos",
    "title": "Introdução ao R para análise de dados",
    "section": "",
    "text": "Dia 1: Ambientação e conceitos básicos\nDia 2: Importação e transformação",
    "crumbs": [
      "Introdução ao R para análise de dados"
    ]
  },
  {
    "objectID": "intro-r/dia-1.html",
    "href": "intro-r/dia-1.html",
    "title": "2  Dia 1 - Ambientação e conceitos básicos",
    "section": "",
    "text": "2.0.1 O que é o R?\nR é uma linguagem de programação com o foco em estatística, análise e visualização de dados.\nEla é uma linguagem de código aberto, o que significa que qualquer pessoa pode utilizá-la gratuitamente. Além disso, as pessoas com mais experiência na linguagem podem contribuir com o desenvolvimento de novas funcionalidades e pacotes.\nCaso queira saber mais sobre a linguagem R, acesse o site oficial (R-Project).\nAo instalar o R, você terá acesso a um programa chamado “R Console” que permite escrever e executar códigos em R:\n\n\n\nCaptura de tela do R Console no Windows\n\n\nPorém o R Console não é muito amigável para escrever códigos complexos ou realizar análises de dados. Por isso, é recomendado utilizar um ambiente de desenvolvimento integrado (IDE). A IDE mais utilizada por pessoas que programam em R é o RStudio.\n\n\n2.0.2 O que é o RStudio?\n\nO RStudio é um IDE focada em programação em R, e é desenvolvido pela Posit. Ele facilita a escrita de códigos, execução de scripts, e visualização dos resultados.\nExistem algumas versões do RStudio. Nesta oficina, utilizaremos o RStudio Desktop, pois é a versão de código aberto (portanto é gratuita). Daqui em diante, sempre que mencionarmos “RStudio”, estaremos nos referindo ao RStudio Desktop.\n\n\n2.0.3 Criando projetos\nO RStudio possui uma funcionalidade chamada projetos. Quando criamos um projeto no RStudio, uma nova pasta é criada no computador, e o RStudio define essa pasta como o diretório de trabalho. Além disso, o RStudio também cria um arquivo com a extensão .Rproj dentro dessa pasta, que contém informações sobre o projeto.\nÉ recomendado que sempre trabalhemos em projetos no RStudio, pois isso facilita a organização dos arquivos e a reprodução do código.\nÉ recomendado também salvar os arquivos referentes ao projeto (como scripts, bases de dados, resultados, etc) dentro do projeto. Isso não significa que precisamos colocar todos os arquivos dentro da pasta principal do projeto: podemos criar sub-pastas para organizar os arquivos.\nPara criar um projeto no RStudio, primeiro precisamos acessar o menu de criação de projetos (New project Wizard). Podemos fazer isso de três formas:\n\nNo menu superior, clicando em File &gt; New Project...\nClicando no ícone de novo projeto na barra de ferramentas do RStudio: \nNo canto superior esquerdo, clicando no botão referente à projetos, e depois em New Project...:\n\n\n\n\nCaptura de tela do RStudio: Menu de projetos\n\n\nDepois, escolhemos o tipo de projeto que queremos criar. No geral, escolhemos a opção New Directory, para criar uma nova pasta no computador:\n\n\n\nCaptura de tela do RStudio: Criando um projeto\n\n\nDepois, escolhemos o tipo de projeto que queremos criar. Cada tipo de projeto apresenta arquivos específicos de template. O RStudio apresenta algumas opções de projeto, porém é possível adicionar novos tipos de projeto instalandos pacotes específicos.\nNo geral, escolhemos a opção New Project, para criar um projeto simples:\n\n\n\nCaptura de tela do RStudio: Escolhendo o tipo de projeto\n\n\nNa tela seguinte, precisamos informar o nome do projeto (no campo Directory name) e o diretório onde ele será criado (no campo Create project as subdirectory of):\n\n\n\nCaptura de tela do RStudio: Nomeando o projeto\n\n\nApós preencher as informações solicitadas, clicamos em Create Project. O RStudio criará o projeto e o abrirá:\n\n\n\nCaptura de tela do RStudio: projeto criado\n\n\n\n\n\n\n\n\nDica\n\n\n\nNote que o nome do projeto que criamos aparece no canto superior direito do RStudio.\n\n\n\n\n2.0.4 Conhecendo o RStudio\nAo abrir o RStudio, veremos a seguinte tela:\n Aos poucos, conheceremos os painéis e funcionalidades do RStudio. Neste momento, podemos destacar os três painéis que são apresentados:\n\nConsole: painel onde os códigos são executados. É similar ao “R Console”, citado anteriormente.\nEnvironment: painel onde as variáveis e dados carregados ficam listados.\nFiles: painel onde podemos navegar por arquivos no computador. A página inicial é o diretório de trabalho: esse conceito será explicado mais adiante.\n\n\n\n2.0.5 Scripts\nNo RStudio, podemos escrever e executar códigos no Console, porém os códigos são perdidos quando fechamos o programa. Para salvar os códigos e reutilizá-los posteriormente, utilizamos scripts.\nOs scripts são arquivos de texto onde podemos escrever códigos R e salvá-los para utilizar posteriormente. É recomendado que qualquer código que você deseje reutilizar ou que seja importante para a análise que você fizer seja salvo em um script.\nExistem algumas formas de criar um novo script:\n\nNo menu superior, clicando em File &gt; New File &gt; R Script.\nUtilizando o atalho Ctrl + Shift + N (Windows) ou Cmd + Shift + N (Mac).\nClicando no ícone de um arquivo com um sinal de + no canto superior esquerdo do RStudio e selecionando R Script:\n\n\n\n\nCaptura de tela do RStudio: Opção para criar novo Script\n\n\nApós abrir um script, o RStudio exibirá 4 paineis:\n\n\n\nCaptura de tela do RStudio\n\n\n\n\n\n\n\n\nDica\n\n\n\nO script é um arquivo salvo no nosso computador. Lembre-se de salvar os scripts com frequência para evitar perder o nosso trabalho.\nPodemos salvar um script de algumas formas, como:\n\nClicando em File &gt; Save no menu superior.\nClicando no ícone do disquete ().\nUtilizando o atalho Ctrl + S (Windows) ou Cmd + S (Mac).\n\n\n\n\n2.0.5.1 Como executar os códigos?\nPodemos escrever e executar códigos no Console ou em um script.\nNo Console, escrevemos o código diretamente e pressionamos Enter para executá-lo.\nEm um Script, escrevemos o código e podemos executá-lo de algumas formas:\n\nSelecionando o trecho de código que queremos executar e clicando no botão Run do RStudio, ou utilizando o atalho Ctrl + Enter (Windows) ou Cmd + Enter (Mac).\nClicando no trecho que queremos executar e clicando no botão Run do RStudio, ou utilizando o atalho Ctrl + Enter (Windows) ou Cmd + Enter (Mac).\n\n\n\n2.0.5.2 Comentários\nComentários são textos que não são executados pelo R. Podemos usar comentários para explicar o que um bloco de código faz, para anotar ideias e explicar escolhas feitas, ou para desativar temporariamente um trecho de código.\nNo R, todo texto em uma linha após um hashtag (#) é um comentário. Por exemplo:\n\n# Este é um comentário\n\n\n\n\n2.0.6 Funções\nAgora que já sabemos onde escrever nossos códigos em R (no Console ou em um script), é importante entender o conceito de funções.\nUma função é tipo de objeto no R, que quando executado, executa um bloco de código específico. As funções são úteis para evitar repetição de códigos e organizar o nosso trabalho.\nNo R, existem muitas funções prontas que podemos utilizar. Por exemplo, a função Sys.Date() retorna a data atual do sistema:\n\n# Consutar a data atual do sistema (computador)\nSys.Date()\n\n[1] \"2025-07-21\"\n\n\nPara utilizar uma função, escrevemos o nome dela seguido de parênteses. Dentro dos parênteses, podemos colocar dados e informações úteis para a função executar a tarefa desejada, e são chamados de argumentos.\nPor exemplo, a função sqrt() calcula a raiz quadrada de um número. Para utilizá-la, podemos escrever sqrt() e informar esse número entre parênteses:\n\n# Calcular a raiz quadrada de 25\nsqrt(25)\n\n[1] 5\n\n\nAlgumas funções podem receber mais de um argumento. Por exemplo, a função round() arredonda um número para um determinado número de casas decimais. Para utilizá-la, podemos escrever round() e informar o número e o número de casas decimais entre parênteses:\n\npi\n\n[1] 3.141593\n\n# Sem argumentos: arredondar o número pi para um número inteiro (0 casas decimais)\nround(pi)\n\n[1] 3\n\n# Com argumentos: arredondar o número pi para 2 casas decimais\nround(pi, digits = 2)\n\n[1] 3.14\n\n\nPodemos consultar a documentação de uma função para entender como ela funciona, quais argumentos ela aceita e como utilizá-la. Falaremos mais sobre isso na seção de documentação.\n\n\n\n\n\n\nDica\n\n\n\nAo adquirir experiência com o R, podemos criar nossas próprias funções. Isso é útil para automatizar tarefas repetitivas e para organizar o código.\n\n\n\n\n2.0.7 Pacotes\nPacotes do R são coleções de funções, dados e documentação que estendem a funcionalidade básica da linguagem.\nPara instalar um pacote, utilizamos a função install.packages() e informando o nome do pacote como texto entre aspas. Por exemplo, para instalar o pacote {tidyverse}, utilizamos o seguinte comando:\n\n# Instalar o pacote tidyverse\ninstall.packages(\"tidyverse\") \n\nApenas precisamos instalar um pacote uma vez.\nDepois de instalado, podemos carregá-lo com a função library(), para que as funções do pacote fiquem disponíveis para uso:\n\n# Carregar o pacote tidyverse\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nPrecisamos carregar o pacote sempre que abrirmos um novo script, ou quando reiniciamos o RStudio. Uma pratica frequente é carregar os principais pacotes necessários no início do script.\n\n\n\n\n\n\nCuidado\n\n\n\nUma outra forma de acessar uma função é utilizando o operador ::. Por exemplo, para acessar a função read_csv() do pacote {readr}, podemos escrever readr::read_csv().\nEssa sintaxe é menos frequente, porém útil para evitar problemas de conflito de funções com o mesmo nome em pacotes diferentes. Esse problema acontece mais frequentemente quando carregamos muitos pacotes em um mesmo script.\nPor exemplo: o pacote {dplyr} apresenta uma função filter(), e o pacote {stats} também apresenta uma função filter(). Se não usarmos o operador ::, a função utilizada será a do pacote que foi carregado por último. Usando o operador ::, podemos escolher qual função queremos utilizar.\n\n\n\n\n2.0.8 Documentação\nAs funções e pacotes do R apresentam textos com explicações e exemplos de uso, chamados de documentação.\nNo RStudio, podemos acessar a documentação de uma função ou pacote das seguintes formas:\n\nPara buscar informações sobre funções de pacotes já carregados (com library), podemos utilizar a função help(), informando o nome da função que queremos buscar como argumento (ex: help(mean)), ou utilizar o operador ?, seguido do nome da função (ex: ?mean).\n\n\n# Abrir a documentação da função mean()\nhelp(mean)\n?mean  \n\n\nPara fazer uma por funções presentes em todos os pacotes instalados no computador, podemos utilizar o operador ??, seguido pelo termo que queremos buscar (ex: ??mean). Essa é uma busca mais ampla, que procura pelo termo no nome e na descrição das funções.\n\n\n# Buscar por funções que contenham o termo \"mean\"\n??mean \n\n\nPodemos utilizar o painel Help para buscar informações sobre funções e pacotes:\n\n\n\n\nCaptura de tela do RStudio: Painel Help\n\n\n\n\n2.0.9 Operações matemáticas\nO R permite realizar operações matemáticas básicas, como soma, subtração, multiplicação, divisão, potenciação, entre outras.\n\n1 + 1 # Soma\n\n[1] 2\n\n1 - 1 # Subtração\n\n[1] 0\n\n2 * 3 # Multiplicação\n\n[1] 6\n\n10 / 2 # Divisão\n\n[1] 5\n\n2 ^ 3 # Potenciação\n\n[1] 8\n\n\nA ordem matemática das operações também vale no R. Por exemplo, a expressão 2 + 3 * 4 será calculada como 2 + (3 * 4):\n\n2 + 3 * 4\n\n[1] 14\n\n\n\n\n2.0.10 Objetos\nNo R, um objeto é uma estrutura de dados que armazena valores: podemos armazenar um valor único, um conjunto de valores, uma base de dados, entre outros.\nÉ muito útil armazenar valores em objetos, pois podemos reutilizá-los em diferentes partes do código, sem precisar digitar o valor novamente.\n\n2.0.10.1 Objetos existentes no R\nExistem alguns objetos já criados no R, como por exemplo o objeto letters, que armazena as letras do alfabeto:\n\npi\n\n[1] 3.141593\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\n\n\n\n\n\n\nAviso\n\n\n\nO R é case-sensitive, ou seja, ele diferencia letras maiúsculas de minúsculas. Portanto, nome é diferente de Nome.\nPor exemplo, o objeto pi armazena o valor de π (com um número limitado de casas decimais). O nome do objeto é escrito em minúsculas:\n\npi\n\n[1] 3.141593\n\n\nSe tentarmos acessar o objeto com o nome em maiúsculas, o R irá retornar um erro, pois esse objeto não existe:\n\nPi\n\nError: object 'Pi' not found\n\n\n\n\n\n\n2.0.10.2 Criando um objeto\nPara criar um objeto, precisamos definir um nome, e atribuir um valor à este nome. Para isso, usamos o operador de atribuição: &lt;-. Um atalho para esse operador é o Ctrl + - no Windows, ou Option + - no Mac .\nNo exemplo a seguir, criamos um objeto chamado nome_da_universidade e atribuímos a ele o texto \"Universidade de São Paulo\":\n\nnome_da_universidade &lt;- \"Universidade de São Paulo\"\n\nPodemos acessar o valor armazenado em um objeto digitando o nome do objeto:\n\nnome_da_universidade\n\n[1] \"Universidade de São Paulo\"\n\n\nO objeto apenas será alterado se utilizarmos o operador de atribuição novamente. Por exemplo, a função tolower() transforma todas as letras de um texto em minúsculas:\n\ntolower(nome_da_universidade)\n\n[1] \"universidade de são paulo\"\n\n\nMas como não utilizamos a atribuição, o objeto nome_da_universidade não foi alterado:\n\nnome_da_universidade\n\n[1] \"Universidade de São Paulo\"\n\n\nPara alterar o objeto, precisamos atribuir o resultado da função tolower() ao objeto nome_da_universidade:\n\nnome_da_universidade &lt;- tolower(nome_da_universidade)\n\nAgora, o objeto nome_da_universidade foi alterado:\n\nnome_da_universidade\n\n[1] \"universidade de são paulo\"\n\n\nPortanto, cuidado: ao criar um objeto com nome igual à outro objeto existente, o objeto anterior será substituído pelo novo objeto.\n\n\n\n2.0.11 Tipos de objetos\nExistem diferentes tipos de objetos no R, e cada tipo de objeto possui diferentes propriedades. Os principais tipos de objetos que utilizaremos ao longo do curso são: vetores e data.frames.\n\n2.0.11.1 Vetores\nVetores armazenam um conjunto de valores de uma dimensão. Eles podem ser criados com a função c(), que significa combine (combinar). Por exemplo, para criar um vetor com os números de 1 a 5:\n\nvetor_de_numeros &lt;- c(1, 2, 3, 4, 5)\n\nOs vetores podem armazenar diferentes tipos de dados, como números, textos, fatores, entre outros. Porém cada vetor pode armazenar apenas um tipo de dado. Por exemplo, se tentarmos criar um vetor que armazena números e textos, o R irá converter todos os valores para texto. Essa propriedade é chamada de coerção.\n\nvetor_misto &lt;- c(1, 2, \"três\", 4, 5)\nclass(vetor_misto)\n\n[1] \"character\"\n\nvetor_misto\n\n[1] \"1\"    \"2\"    \"três\" \"4\"    \"5\"   \n\n\nNo geral, podemos converter dados sem perder informação seguindo essa ordem: Lógico &gt; Inteiro &gt; Numérico &gt; Texto.\n\n\n2.0.11.2 Data.frames\nOs data.frames são conjuntos de valores com duas dimensões: linhas e colunas. Porém, diferente do que vimos para as matrizes, os data.frames podem armazenar diferentes tipos de dados em cada coluna.\nEsse é o principal tipo de objeto que utilizaremos nesse curso, pois ele é muito útil para armazenar dados tabulares.\nExistem alguns data.frames já criados no R, como o airquality, que armazena dados sobre a qualidade do ar na cidade de Nova York, em 1973. Essas são as primeiras linhas do data.frame airquality:\n\nhead(airquality)\n\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n\n\nPara criar um data.frame, podemos usar a função data.frame(). Entretanto, o mais comum é importar dados de arquivos, como CSV, Excel, ou de bancos de dados. Falaremos sobre como importar dados na próxima aula.",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Dia 1 - Ambientação e conceitos básicos</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html",
    "href": "intro-r/dia-2.html",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "",
    "text": "3.1 Importação de dados",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#importação-de-dados",
    "href": "intro-r/dia-2.html#importação-de-dados",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "",
    "text": "3.1.1 Dados utilizados: Eleicões de 2024\nOs dados que utilizaremos nesse curso são provenientes de uma base de dados do Tribunal Superior Eleitoral (TSE) do Brasil, que contém informações sobre candidatos para as eleições de 2024. A base de dados original foi baixada do portal de dados abertos do TSE: Candidatos - 2024. Para facilitar o download dos dados durante a atividade, filtramos a tabela para dados do município de São Paulo, apenas candidatos(as) para o cargo de Vereador, e unimos com os dados de resultados (soma de votos válidos).\nJunto aos dados, o TSE disponibiliza também um arquivo chamado leiame.pdf, com informações importantes sobre os dados, significado dos nomes das colunas, entre outros. É importante ler estes arquivos, quando disponibilizados.\nVamos utilizar o pacote tidyverse para importar os dados, então é importante garantir que ele esteja carregado:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nO arquivo que queremos importar é esse aqui: candidatos_vereador_com_votos.csv. Ele é um arquivo .csv (CSV = comma separated values, ou valores separados por vírgula), porém o separador utilizado é o ;.\nPara importar esse arquivo, podemos utilizar a função read_csv2() (a função read_csv() é utilizada para importar tabelas com valores separados por vírgula):\n\ndados &lt;- read_csv2(\"https://raw.githubusercontent.com/beatrizmilz/2025-07-fbcp/refs/heads/main/intro-r/dados/candidatos_vereador_com_votos.csv\")\n\nCaso o arquivo esteja salvo no projeto, também podemos importar os dados utilizando o caminho relativo do arquivo:\n\ndados &lt;- read_csv2(\"dados/candidatos_vereador_com_votos.csv\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nRows: 1016 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr  (31): DT_GERACAO, NM_TIPO_ELEICAO, DS_ELEICAO, DT_ELEICAO, TP_ABRANGENC...\ndbl  (19): ANO_ELEICAO, CD_TIPO_ELEICAO, NR_TURNO, CD_ELEICAO, SG_UE, CD_CAR...\ntime  (1): HH_GERACAO\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nA função View() pode ser utilizada para visualizar os dados em uma tabela interativa:\n\nView(dados)\n\n\n\n\n\n\n\nNota\n\n\n\nAs funções de importação costumam ser específicas para o tipo de arquivo que você está tentando importar. Abaixo estão algumas das funções mais comuns do pacote readr e outros pacotes para importar diferentes tipos de arquivos:\n\n\n\n\n\n\n\n\n\nFunção\nPacote\nExtensão do arquivo\nDescrição\n\n\n\n\nread_csv()\nreadr\n.csv\nSeparador: ,\n\n\nread_csv2()\nreadr\n.csv\nSeparador: ;\n\n\nread_delim()\nreadr\n.txt, .tsv,.csv, etc.\nPermite especificar o separador\n\n\nread_rds()\nreadr\n.rds\nImporta arquivos RDS (R data files)\n\n\nread_excel()\nreadxl\n.xlsx, .xls\nImporta arquivos do Excel\n\n\nread_sheet()\ngooglesheets4\n-\nImporta planilhas do Google Sheets\n\n\nread_sf()\nsf\n.geojson, .shp, etc.\nImporta dados espaciais (geográficos)\n\n\nread_parquet()\narrow\n.parquet\nImporta arquivos Parquet (formato de armazenamento colunar)\n\n\n\n\n\n\n\n3.1.2 Conhecendo a base de dados\nPara conhecer melhor a base de dados, podemos utilizar algumas funções para explorar as colunas e os tipos de dados.\nA função nrow() nos mostra o número de linhas da base de dados, e a função ncol() nos mostra o número de colunas:\n\nnrow(dados)\n\n[1] 1016\n\nncol(dados)\n\n[1] 51\n\n\nA função colnames() nos mostra os nomes das colunas:\n\ncolnames(dados)\n\n [1] \"DT_GERACAO\"                     \"HH_GERACAO\"                    \n [3] \"ANO_ELEICAO\"                    \"CD_TIPO_ELEICAO\"               \n [5] \"NM_TIPO_ELEICAO\"                \"NR_TURNO\"                      \n [7] \"CD_ELEICAO\"                     \"DS_ELEICAO\"                    \n [9] \"DT_ELEICAO\"                     \"TP_ABRANGENCIA\"                \n[11] \"SG_UF\"                          \"SG_UE\"                         \n[13] \"NM_UE\"                          \"CD_CARGO\"                      \n[15] \"DS_CARGO\"                       \"SQ_CANDIDATO\"                  \n[17] \"NR_CANDIDATO\"                   \"NM_CANDIDATO\"                  \n[19] \"NM_URNA_CANDIDATO\"              \"NM_SOCIAL_CANDIDATO\"           \n[21] \"NR_CPF_CANDIDATO\"               \"DS_EMAIL\"                      \n[23] \"CD_SITUACAO_CANDIDATURA\"        \"DS_SITUACAO_CANDIDATURA\"       \n[25] \"TP_AGREMIACAO\"                  \"NR_PARTIDO\"                    \n[27] \"SG_PARTIDO\"                     \"NM_PARTIDO\"                    \n[29] \"NR_FEDERACAO\"                   \"NM_FEDERACAO\"                  \n[31] \"SG_FEDERACAO\"                   \"DS_COMPOSICAO_FEDERACAO\"       \n[33] \"SQ_COLIGACAO\"                   \"NM_COLIGACAO\"                  \n[35] \"DS_COMPOSICAO_COLIGACAO\"        \"SG_UF_NASCIMENTO\"              \n[37] \"DT_NASCIMENTO\"                  \"NR_TITULO_ELEITORAL_CANDIDATO\" \n[39] \"CD_GENERO\"                      \"DS_GENERO\"                     \n[41] \"CD_GRAU_INSTRUCAO\"              \"DS_GRAU_INSTRUCAO\"             \n[43] \"CD_ESTADO_CIVIL\"                \"DS_ESTADO_CIVIL\"               \n[45] \"CD_COR_RACA\"                    \"DS_COR_RACA\"                   \n[47] \"CD_OCUPACAO\"                    \"DS_OCUPACAO\"                   \n[49] \"CD_SIT_TOT_TURNO\"               \"DS_SIT_TOT_TURNO\"              \n[51] \"SOMA_QT_VOTOS_NOMINAIS_VALIDOS\"\n\n\nA função head() nos mostra as primeiras linhas da base de dados, e a função tail() nos mostra as últimas linhas:\n\nhead(dados)\n\n# A tibble: 6 × 51\n  DT_GERACAO HH_GERACAO ANO_ELEICAO CD_TIPO_ELEICAO NM_TIPO_ELEICAO   NR_TURNO\n  &lt;chr&gt;      &lt;time&gt;           &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n1 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n2 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n3 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n4 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n5 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n6 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n# ℹ 45 more variables: CD_ELEICAO &lt;dbl&gt;, DS_ELEICAO &lt;chr&gt;, DT_ELEICAO &lt;chr&gt;,\n#   TP_ABRANGENCIA &lt;chr&gt;, SG_UF &lt;chr&gt;, SG_UE &lt;dbl&gt;, NM_UE &lt;chr&gt;,\n#   CD_CARGO &lt;dbl&gt;, DS_CARGO &lt;chr&gt;, SQ_CANDIDATO &lt;dbl&gt;, NR_CANDIDATO &lt;dbl&gt;,\n#   NM_CANDIDATO &lt;chr&gt;, NM_URNA_CANDIDATO &lt;chr&gt;, NM_SOCIAL_CANDIDATO &lt;chr&gt;,\n#   NR_CPF_CANDIDATO &lt;dbl&gt;, DS_EMAIL &lt;chr&gt;, CD_SITUACAO_CANDIDATURA &lt;dbl&gt;,\n#   DS_SITUACAO_CANDIDATURA &lt;chr&gt;, TP_AGREMIACAO &lt;chr&gt;, NR_PARTIDO &lt;dbl&gt;,\n#   SG_PARTIDO &lt;chr&gt;, NM_PARTIDO &lt;chr&gt;, NR_FEDERACAO &lt;dbl&gt;, …\n\ntail(dados)\n\n# A tibble: 6 × 51\n  DT_GERACAO HH_GERACAO ANO_ELEICAO CD_TIPO_ELEICAO NM_TIPO_ELEICAO   NR_TURNO\n  &lt;chr&gt;      &lt;time&gt;           &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n1 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n2 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n3 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n4 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n5 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n6 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n# ℹ 45 more variables: CD_ELEICAO &lt;dbl&gt;, DS_ELEICAO &lt;chr&gt;, DT_ELEICAO &lt;chr&gt;,\n#   TP_ABRANGENCIA &lt;chr&gt;, SG_UF &lt;chr&gt;, SG_UE &lt;dbl&gt;, NM_UE &lt;chr&gt;,\n#   CD_CARGO &lt;dbl&gt;, DS_CARGO &lt;chr&gt;, SQ_CANDIDATO &lt;dbl&gt;, NR_CANDIDATO &lt;dbl&gt;,\n#   NM_CANDIDATO &lt;chr&gt;, NM_URNA_CANDIDATO &lt;chr&gt;, NM_SOCIAL_CANDIDATO &lt;chr&gt;,\n#   NR_CPF_CANDIDATO &lt;dbl&gt;, DS_EMAIL &lt;chr&gt;, CD_SITUACAO_CANDIDATURA &lt;dbl&gt;,\n#   DS_SITUACAO_CANDIDATURA &lt;chr&gt;, TP_AGREMIACAO &lt;chr&gt;, NR_PARTIDO &lt;dbl&gt;,\n#   SG_PARTIDO &lt;chr&gt;, NM_PARTIDO &lt;chr&gt;, NR_FEDERACAO &lt;dbl&gt;, …\n\n\nA função glimpse() apresenta várias informações relevantes: número de linhas, número de colunas, nome das colunas, valores de algumas observações, etc.\n\nglimpse(dados)\n\nRows: 1,016\nColumns: 51\n$ DT_GERACAO                     &lt;chr&gt; \"18/07/2025\", \"18/07/2025\", \"18/07/2025…\n$ HH_GERACAO                     &lt;time&gt; 12:30:11, 12:30:11, 12:30:11, 12:30:11…\n$ ANO_ELEICAO                    &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 202…\n$ CD_TIPO_ELEICAO                &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ NM_TIPO_ELEICAO                &lt;chr&gt; \"ELEIÇÃO ORDINÁRIA\", \"ELEIÇÃO ORDINÁRIA…\n$ NR_TURNO                       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ CD_ELEICAO                     &lt;dbl&gt; 619, 619, 619, 619, 619, 619, 619, 619,…\n$ DS_ELEICAO                     &lt;chr&gt; \"Eleições Municipais 2024\", \"Eleições M…\n$ DT_ELEICAO                     &lt;chr&gt; \"06/10/2024\", \"06/10/2024\", \"06/10/2024…\n$ TP_ABRANGENCIA                 &lt;chr&gt; \"MUNICIPAL\", \"MUNICIPAL\", \"MUNICIPAL\", …\n$ SG_UF                          &lt;chr&gt; \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP…\n$ SG_UE                          &lt;dbl&gt; 71072, 71072, 71072, 71072, 71072, 7107…\n$ NM_UE                          &lt;chr&gt; \"SÃO PAULO\", \"SÃO PAULO\", \"SÃO PAULO\", …\n$ CD_CARGO                       &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,…\n$ DS_CARGO                       &lt;chr&gt; \"VEREADOR\", \"VEREADOR\", \"VEREADOR\", \"VE…\n$ SQ_CANDIDATO                   &lt;dbl&gt; 250002371355, 250002371356, 25000237135…\n$ NR_CANDIDATO                   &lt;dbl&gt; 36541, 36222, 36364, 36333, 77042, 7773…\n$ NM_CANDIDATO                   &lt;chr&gt; \"GENTIL ALVES DOS SANTOS NETO\", \"JOSÉ S…\n$ NM_URNA_CANDIDATO              &lt;chr&gt; \"GENTIL VIGILANTE\", \"JOSÉ LIMA DO TRANS…\n$ NM_SOCIAL_CANDIDATO            &lt;chr&gt; \"#NULO\", \"#NULO\", \"#NULO\", \"#NULO\", \"#N…\n$ NR_CPF_CANDIDATO               &lt;dbl&gt; -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,…\n$ DS_EMAIL                       &lt;chr&gt; \"NÃO DIVULGÁVEL\", \"NÃO DIVULGÁVEL\", \"NÃ…\n$ CD_SITUACAO_CANDIDATURA        &lt;dbl&gt; -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,…\n$ DS_SITUACAO_CANDIDATURA        &lt;chr&gt; \"#NE\", \"#NE\", \"#NE\", \"#NE\", \"#NE\", \"#NE…\n$ TP_AGREMIACAO                  &lt;chr&gt; \"PARTIDO ISOLADO\", \"PARTIDO ISOLADO\", \"…\n$ NR_PARTIDO                     &lt;dbl&gt; 36, 36, 36, 36, 77, 77, 77, 77, 77, 77,…\n$ SG_PARTIDO                     &lt;chr&gt; \"AGIR\", \"AGIR\", \"AGIR\", \"AGIR\", \"SOLIDA…\n$ NM_PARTIDO                     &lt;chr&gt; \"AGIR\", \"AGIR\", \"AGIR\", \"AGIR\", \"SOLIDA…\n$ NR_FEDERACAO                   &lt;dbl&gt; -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,…\n$ NM_FEDERACAO                   &lt;chr&gt; \"#NULO\", \"#NULO\", \"#NULO\", \"#NULO\", \"#N…\n$ SG_FEDERACAO                   &lt;chr&gt; \"#NULO\", \"#NULO\", \"#NULO\", \"#NULO\", \"#N…\n$ DS_COMPOSICAO_FEDERACAO        &lt;chr&gt; \"#NULO\", \"#NULO\", \"#NULO\", \"#NULO\", \"#N…\n$ SQ_COLIGACAO                   &lt;dbl&gt; 250001762261, 250001762261, 25000176226…\n$ NM_COLIGACAO                   &lt;chr&gt; \"PARTIDO ISOLADO\", \"PARTIDO ISOLADO\", \"…\n$ DS_COMPOSICAO_COLIGACAO        &lt;chr&gt; \"AGIR\", \"AGIR\", \"AGIR\", \"AGIR\", \"SOLIDA…\n$ SG_UF_NASCIMENTO               &lt;chr&gt; \"SP\", \"BA\", \"SP\", \"SP\", \"SP\", \"MG\", \"SP…\n$ DT_NASCIMENTO                  &lt;chr&gt; \"23/05/1968\", \"26/11/1960\", \"23/08/1958…\n$ NR_TITULO_ELEITORAL_CANDIDATO  &lt;chr&gt; \"039430770141\", \"093136380124\", \"138148…\n$ CD_GENERO                      &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 4, 4, 4, …\n$ DS_GENERO                      &lt;chr&gt; \"MASCULINO\", \"MASCULINO\", \"MASCULINO\", …\n$ CD_GRAU_INSTRUCAO              &lt;dbl&gt; 8, 6, 8, 6, 8, 8, 8, 8, 8, 5, 5, 6, 8, …\n$ DS_GRAU_INSTRUCAO              &lt;chr&gt; \"SUPERIOR COMPLETO\", \"ENSINO MÉDIO COMP…\n$ CD_ESTADO_CIVIL                &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 9, 3, …\n$ DS_ESTADO_CIVIL                &lt;chr&gt; \"CASADO(A)\", \"CASADO(A)\", \"CASADO(A)\", …\n$ CD_COR_RACA                    &lt;chr&gt; \"01\", \"01\", \"02\", \"01\", \"02\", \"03\", \"01…\n$ DS_COR_RACA                    &lt;chr&gt; \"BRANCA\", \"BRANCA\", \"PRETA\", \"BRANCA\", …\n$ CD_OCUPACAO                    &lt;dbl&gt; 254, 531, 923, 923, 999, 923, 157, 169,…\n$ DS_OCUPACAO                    &lt;chr&gt; \"VIGILANTE\", \"MOTORISTA DE VEÍCULOS DE …\n$ CD_SIT_TOT_TURNO               &lt;dbl&gt; 4, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, …\n$ DS_SIT_TOT_TURNO               &lt;chr&gt; \"NÃO ELEITO\", \"#NULO\", \"#NULO\", \"#NULO\"…\n$ SOMA_QT_VOTOS_NOMINAIS_VALIDOS &lt;dbl&gt; NA, NA, NA, NA, 224, 985, 49, 843, 299,…",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#transformação-de-dados",
    "href": "intro-r/dia-2.html#transformação-de-dados",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.2 Transformação de dados",
    "text": "3.2 Transformação de dados\nVamos conhecer as funções mais importantes do pacote dplyr para transformação de dados (também conhecido como manipulação de dados - data wrangling).",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#conhecendo-o-operador-pipe",
    "href": "intro-r/dia-2.html#conhecendo-o-operador-pipe",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.3 Conhecendo o operador pipe (|>)",
    "text": "3.3 Conhecendo o operador pipe (|&gt;)\nO operador pipe (|&gt; ou %&gt;%) permite encadear operações de forma mais legível e intuitiva.\nPor exemplo, podemos utilizar o operador pipe para aplicar a função glimpse() diretamente nos dados:\n\ndados |&gt; \n  glimpse()\n\nCom apenas uma função, não é tão óbvio o benefício do operador pipe. No entanto, quando começamos a encadear várias funções, ele se torna muito útil. Veremos exemplos disso ao longo desta aula!",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#principais-verbos-do-dplyr",
    "href": "intro-r/dia-2.html#principais-verbos-do-dplyr",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.4 Principais verbos do dplyr",
    "text": "3.4 Principais verbos do dplyr\nO pacote dplyr é uma das ferramentas mais poderosas para manipulação de dados no R. Ele oferece uma série de funções que facilitam a transformação e análise de dados. Vamos conhecer algumas das principais funções do dplyr:\n\nselect(): seleciona colunas específicas de um data frame.\narrange(): ordena as linhas de um data frame com base em uma ou mais colunas.\nfilter(): filtra linhas com base em condições específicas.\nmutate(): adiciona ou modifica colunas.\nsummarise(): resume os dados, calculando estatísticas agregadas.\ngroup_by(): agrupa os dados com base em uma ou mais colunas, permitindo aplicar funções de resumo a cada grupo.\n\nAo apresentar essas funções, não vamos abordar todos os casos de uso, mas sim o básico de cada uma delas. Você pode consultar os materiais extras para aprender mais sobre cada função e suas possibilidades.",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#selecionando-colunas-com-select",
    "href": "intro-r/dia-2.html#selecionando-colunas-com-select",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.5 Selecionando colunas com select()",
    "text": "3.5 Selecionando colunas com select()\nA função select() é utilizada para selecionar colunas específicas de um data frame.\nPor exemplo, podemos selecionar apenas um conjunto de colunas de interesse:\n\ndados_selecionados &lt;- dados |&gt;\n  select(NM_CANDIDATO, SG_PARTIDO, DS_SIT_TOT_TURNO, SOMA_QT_VOTOS_NOMINAIS_VALIDOS)\n\ndados_selecionados\n\n# A tibble: 1,016 × 4\n   NM_CANDIDATO               SG_PARTIDO DS_SIT_TOT_TURNO SOMA_QT_VOTOS_NOMINA…¹\n   &lt;chr&gt;                      &lt;chr&gt;      &lt;chr&gt;                             &lt;dbl&gt;\n 1 GENTIL ALVES DOS SANTOS N… AGIR       NÃO ELEITO                           NA\n 2 JOSÉ SILVA LIMA            AGIR       #NULO                                NA\n 3 JOSÉ GILMAR ARAÚJO DOS SA… AGIR       #NULO                                NA\n 4 OSVALDO BARROS FRANCO      AGIR       #NULO                                NA\n 5 MÁRCIO PEDRAZA AGUILERA    SOLIDARIE… NÃO ELEITO                          224\n 6 NEZINHO GONÇALVES NUNES    SOLIDARIE… NÃO ELEITO                          985\n 7 ANGELA BARBOSA DOS SANTOS  SOLIDARIE… NÃO ELEITO                           49\n 8 MARCO BATISTA DE OLIVEIRA  SOLIDARIE… NÃO ELEITO                          843\n 9 RUBENS MASSASHI ITO        SOLIDARIE… NÃO ELEITO                          299\n10 DEIVIDE ALEXANDRE DOS SAN… SOLIDARIE… NÃO ELEITO                          223\n# ℹ 1,006 more rows\n# ℹ abbreviated name: ¹​SOMA_QT_VOTOS_NOMINAIS_VALIDOS\n\n\nPodemos também indicar quais colunas queremos excluir, utilizando o operador - antes do nome da coluna. Por exemplo, para excluir as colunas DT_GERACAO e HH_GERACAO, podemos:\n\ndados |&gt;\n  select(-DT_GERACAO, -HH_GERACAO)\n\n# A tibble: 1,016 × 49\n   ANO_ELEICAO CD_TIPO_ELEICAO NM_TIPO_ELEICAO   NR_TURNO CD_ELEICAO DS_ELEICAO \n         &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;      \n 1        2024               2 ELEIÇÃO ORDINÁRIA        1        619 Eleições M…\n 2        2024               2 ELEIÇÃO ORDINÁRIA        1        619 Eleições M…\n 3        2024               2 ELEIÇÃO ORDINÁRIA        1        619 Eleições M…\n 4        2024               2 ELEIÇÃO ORDINÁRIA        1        619 Eleições M…\n 5        2024               2 ELEIÇÃO ORDINÁRIA        1        619 Eleições M…\n 6        2024               2 ELEIÇÃO ORDINÁRIA        1        619 Eleições M…\n 7        2024               2 ELEIÇÃO ORDINÁRIA        1        619 Eleições M…\n 8        2024               2 ELEIÇÃO ORDINÁRIA        1        619 Eleições M…\n 9        2024               2 ELEIÇÃO ORDINÁRIA        1        619 Eleições M…\n10        2024               2 ELEIÇÃO ORDINÁRIA        1        619 Eleições M…\n# ℹ 1,006 more rows\n# ℹ 43 more variables: DT_ELEICAO &lt;chr&gt;, TP_ABRANGENCIA &lt;chr&gt;, SG_UF &lt;chr&gt;,\n#   SG_UE &lt;dbl&gt;, NM_UE &lt;chr&gt;, CD_CARGO &lt;dbl&gt;, DS_CARGO &lt;chr&gt;,\n#   SQ_CANDIDATO &lt;dbl&gt;, NR_CANDIDATO &lt;dbl&gt;, NM_CANDIDATO &lt;chr&gt;,\n#   NM_URNA_CANDIDATO &lt;chr&gt;, NM_SOCIAL_CANDIDATO &lt;chr&gt;, NR_CPF_CANDIDATO &lt;dbl&gt;,\n#   DS_EMAIL &lt;chr&gt;, CD_SITUACAO_CANDIDATURA &lt;dbl&gt;,\n#   DS_SITUACAO_CANDIDATURA &lt;chr&gt;, TP_AGREMIACAO &lt;chr&gt;, NR_PARTIDO &lt;dbl&gt;, …",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#ordenando-dados-com-arrange",
    "href": "intro-r/dia-2.html#ordenando-dados-com-arrange",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.6 Ordenando dados com arrange()",
    "text": "3.6 Ordenando dados com arrange()\nA função arrange() é utilizada para ordenar as linhas de um data frame com base em uma ou mais colunas.\nPodemos ordenar os dados de dados_selecionados pela coluna SOMA_QT_VOTOS_NOMINAIS_VALIDOS, utilizando a função arrange(). Mas atenção: por padrão, a função arrange() ordena os dados em ordem crescente.\n\ndados_selecionados |&gt;\n  arrange(SOMA_QT_VOTOS_NOMINAIS_VALIDOS)\n\n# A tibble: 1,016 × 4\n   NM_CANDIDATO               SG_PARTIDO DS_SIT_TOT_TURNO SOMA_QT_VOTOS_NOMINA…¹\n   &lt;chr&gt;                      &lt;chr&gt;      &lt;chr&gt;                             &lt;dbl&gt;\n 1 CARLOS ANDRE FURTADO       SOLIDARIE… NÃO ELEITO                            0\n 2 PAULO CAINE DOS SANTOS SI… MOBILIZA   NÃO ELEITO                            0\n 3 VAGNER COELHO DO NASCIMEN… DC         NÃO ELEITO                            0\n 4 GERSON DA CUNHA            SOLIDARIE… NÃO ELEITO                            0\n 5 VERA LÚCIA SANTOS DE FRAN… AGIR       NÃO ELEITO                            0\n 6 APARECIDO BESERRA MONTEIRO PSDB       NÃO ELEITO                            0\n 7 CESAR FERREIRA LONGARES    DC         NÃO ELEITO                            0\n 8 DIEGO DOS REIS SILVA       REPUBLICA… NÃO ELEITO                            0\n 9 GISELE DA SILVA            PSDB       NÃO ELEITO                            0\n10 MARCO ANTONIO DA SILVA     MOBILIZA   NÃO ELEITO                            0\n# ℹ 1,006 more rows\n# ℹ abbreviated name: ¹​SOMA_QT_VOTOS_NOMINAIS_VALIDOS\n\n\nAparentemente, existem alguns candidatos que não receberam votos válidos.\nTambém podemos ordenar os dados em ordem decrescente, utilizando a função desc():\n\ndados_selecionados |&gt;\n  arrange(desc(SOMA_QT_VOTOS_NOMINAIS_VALIDOS))\n\n# A tibble: 1,016 × 4\n   NM_CANDIDATO               SG_PARTIDO DS_SIT_TOT_TURNO SOMA_QT_VOTOS_NOMINA…¹\n   &lt;chr&gt;                      &lt;chr&gt;      &lt;chr&gt;                             &lt;dbl&gt;\n 1 LUCAS PAVANATO DE OLIVEIRA PL         ELEITO POR QP                    161386\n 2 ANA CAROLINA CUNHA DE OLI… PODE       ELEITO POR QP                    129563\n 3 MURILLO DE OLIVEIRA LIMA   PP         ELEITO POR QP                    113820\n 4 ISRAEL NANTES SANTOS       PP         ELEITO POR QP                    112484\n 5 AMANDA MARQUES PASCHOAL    PSOL       ELEITO POR QP                    108654\n 6 RUBENS ALBERTO GATTI NUNES UNIÃO      ELEITO POR QP                    101549\n 7 LUNA ZARATTINI BRANDÃO     PT         ELEITO POR QP                    100921\n 8 LUANA DOS SANTOS ALVES SI… PSOL       ELEITO POR QP                     83262\n 9 SANDRA REGINA CARBONE TAD… PL         ELEITO POR QP                     74511\n10 SANDRA APARECIDA DE SOUZA… UNIÃO      ELEITO POR QP                     74192\n# ℹ 1,006 more rows\n# ℹ abbreviated name: ¹​SOMA_QT_VOTOS_NOMINAIS_VALIDOS",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#filtrando-dados-com-filter",
    "href": "intro-r/dia-2.html#filtrando-dados-com-filter",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.7 Filtrando dados com filter()",
    "text": "3.7 Filtrando dados com filter()\nA função filter() é utilizada para filtrar linhas de um data frame com base em condições específicas.\nPor exemplo, podemos filtrar apenas as pessoas candidatas de determinado partido (neste exemplo, da Rede). Para isso, utilizamos o operador de comparação == (igualdade):\n\ndados |&gt;\n  filter(SG_PARTIDO == \"REDE\")\n\n# A tibble: 8 × 51\n  DT_GERACAO HH_GERACAO ANO_ELEICAO CD_TIPO_ELEICAO NM_TIPO_ELEICAO   NR_TURNO\n  &lt;chr&gt;      &lt;time&gt;           &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n1 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n2 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n3 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n4 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n5 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n6 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n7 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n8 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n# ℹ 45 more variables: CD_ELEICAO &lt;dbl&gt;, DS_ELEICAO &lt;chr&gt;, DT_ELEICAO &lt;chr&gt;,\n#   TP_ABRANGENCIA &lt;chr&gt;, SG_UF &lt;chr&gt;, SG_UE &lt;dbl&gt;, NM_UE &lt;chr&gt;,\n#   CD_CARGO &lt;dbl&gt;, DS_CARGO &lt;chr&gt;, SQ_CANDIDATO &lt;dbl&gt;, NR_CANDIDATO &lt;dbl&gt;,\n#   NM_CANDIDATO &lt;chr&gt;, NM_URNA_CANDIDATO &lt;chr&gt;, NM_SOCIAL_CANDIDATO &lt;chr&gt;,\n#   NR_CPF_CANDIDATO &lt;dbl&gt;, DS_EMAIL &lt;chr&gt;, CD_SITUACAO_CANDIDATURA &lt;dbl&gt;,\n#   DS_SITUACAO_CANDIDATURA &lt;chr&gt;, TP_AGREMIACAO &lt;chr&gt;, NR_PARTIDO &lt;dbl&gt;,\n#   SG_PARTIDO &lt;chr&gt;, NM_PARTIDO &lt;chr&gt;, NR_FEDERACAO &lt;dbl&gt;, …\n\n\nPodemos também filtrar com mais de uma condição. Por exemplo, podemos filtrar apenas os resultados de candidatos(as) a vereador(a) que foram eleitos por quociente partidário (QP) ou por média. Neste caso, usamos o operador %in%, que permite verificar se um valor está presente em um vetor (c()) de valores.\n\ndados_vereadores_eleitos &lt;- dados |&gt;\n  filter(DS_SIT_TOT_TURNO %in% c(\"ELEITO POR QP\", \"ELEITO POR MÉDIA\"))\n\ndados_vereadores_eleitos\n\n# A tibble: 55 × 51\n   DT_GERACAO HH_GERACAO ANO_ELEICAO CD_TIPO_ELEICAO NM_TIPO_ELEICAO   NR_TURNO\n   &lt;chr&gt;      &lt;time&gt;           &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n 1 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 2 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 3 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 4 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 5 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 6 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 7 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 8 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 9 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n10 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n# ℹ 45 more rows\n# ℹ 45 more variables: CD_ELEICAO &lt;dbl&gt;, DS_ELEICAO &lt;chr&gt;, DT_ELEICAO &lt;chr&gt;,\n#   TP_ABRANGENCIA &lt;chr&gt;, SG_UF &lt;chr&gt;, SG_UE &lt;dbl&gt;, NM_UE &lt;chr&gt;,\n#   CD_CARGO &lt;dbl&gt;, DS_CARGO &lt;chr&gt;, SQ_CANDIDATO &lt;dbl&gt;, NR_CANDIDATO &lt;dbl&gt;,\n#   NM_CANDIDATO &lt;chr&gt;, NM_URNA_CANDIDATO &lt;chr&gt;, NM_SOCIAL_CANDIDATO &lt;chr&gt;,\n#   NR_CPF_CANDIDATO &lt;dbl&gt;, DS_EMAIL &lt;chr&gt;, CD_SITUACAO_CANDIDATURA &lt;dbl&gt;,\n#   DS_SITUACAO_CANDIDATURA &lt;chr&gt;, TP_AGREMIACAO &lt;chr&gt;, NR_PARTIDO &lt;dbl&gt;, …\n\n\nA tabela filtrada tem 55 linhas, ou seja, foram eleitos 55 vereadores(as) na cidade de São Paulo nas eleições de 2024.\nPodemos usar filtros com números também. Por exemplo: quantos(as) candidatos(as) a vereador(a) receberam 100 mil votos válidos ou mais?\n\ndados_vereadores_eleitos |&gt; \n  filter(SOMA_QT_VOTOS_NOMINAIS_VALIDOS &gt;= 100000)\n\n# A tibble: 7 × 51\n  DT_GERACAO HH_GERACAO ANO_ELEICAO CD_TIPO_ELEICAO NM_TIPO_ELEICAO   NR_TURNO\n  &lt;chr&gt;      &lt;time&gt;           &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n1 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n2 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n3 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n4 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n5 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n6 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n7 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n# ℹ 45 more variables: CD_ELEICAO &lt;dbl&gt;, DS_ELEICAO &lt;chr&gt;, DT_ELEICAO &lt;chr&gt;,\n#   TP_ABRANGENCIA &lt;chr&gt;, SG_UF &lt;chr&gt;, SG_UE &lt;dbl&gt;, NM_UE &lt;chr&gt;,\n#   CD_CARGO &lt;dbl&gt;, DS_CARGO &lt;chr&gt;, SQ_CANDIDATO &lt;dbl&gt;, NR_CANDIDATO &lt;dbl&gt;,\n#   NM_CANDIDATO &lt;chr&gt;, NM_URNA_CANDIDATO &lt;chr&gt;, NM_SOCIAL_CANDIDATO &lt;chr&gt;,\n#   NR_CPF_CANDIDATO &lt;dbl&gt;, DS_EMAIL &lt;chr&gt;, CD_SITUACAO_CANDIDATURA &lt;dbl&gt;,\n#   DS_SITUACAO_CANDIDATURA &lt;chr&gt;, TP_AGREMIACAO &lt;chr&gt;, NR_PARTIDO &lt;dbl&gt;,\n#   SG_PARTIDO &lt;chr&gt;, NM_PARTIDO &lt;chr&gt;, NR_FEDERACAO &lt;dbl&gt;, …\n\n\nAo filtrar, podemos combinar várias condições utilizando os operadores lógicos (como o | (OU) e o ! (NEGAÇÃO)).",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#adicionando-ou-modificando-colunas-com-mutate",
    "href": "intro-r/dia-2.html#adicionando-ou-modificando-colunas-com-mutate",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.8 Adicionando ou modificando colunas com mutate()",
    "text": "3.8 Adicionando ou modificando colunas com mutate()\nA função mutate() é utilizada para adicionar novas colunas ou modificar colunas existentes em um data frame.\nA sintaxe básica da função mutate() é:\n\nbase_de_dados |&gt; \n  mutate(nome_da_nova_coluna = o_que_queremos_que_seja_salvo_nela)\n\nA função mutate() também pode ser utilizada para modificar colunas existentes.\nPor exemplo, podemos criar uma nova coluna chamada mil_votos_validos, que representa a quantidade de votos válidos dividida por 1000, para facilitar a leitura dos números:\n\ndados_vereadores_eleitos |&gt;\n  mutate(\n    mil_votos_validos = round(SOMA_QT_VOTOS_NOMINAIS_VALIDOS/1000, 2)\n  ) \n\n# A tibble: 55 × 52\n   DT_GERACAO HH_GERACAO ANO_ELEICAO CD_TIPO_ELEICAO NM_TIPO_ELEICAO   NR_TURNO\n   &lt;chr&gt;      &lt;time&gt;           &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n 1 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 2 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 3 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 4 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 5 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 6 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 7 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 8 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 9 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n10 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n# ℹ 45 more rows\n# ℹ 46 more variables: CD_ELEICAO &lt;dbl&gt;, DS_ELEICAO &lt;chr&gt;, DT_ELEICAO &lt;chr&gt;,\n#   TP_ABRANGENCIA &lt;chr&gt;, SG_UF &lt;chr&gt;, SG_UE &lt;dbl&gt;, NM_UE &lt;chr&gt;,\n#   CD_CARGO &lt;dbl&gt;, DS_CARGO &lt;chr&gt;, SQ_CANDIDATO &lt;dbl&gt;, NR_CANDIDATO &lt;dbl&gt;,\n#   NM_CANDIDATO &lt;chr&gt;, NM_URNA_CANDIDATO &lt;chr&gt;, NM_SOCIAL_CANDIDATO &lt;chr&gt;,\n#   NR_CPF_CANDIDATO &lt;dbl&gt;, DS_EMAIL &lt;chr&gt;, CD_SITUACAO_CANDIDATURA &lt;dbl&gt;,\n#   DS_SITUACAO_CANDIDATURA &lt;chr&gt;, TP_AGREMIACAO &lt;chr&gt;, NR_PARTIDO &lt;dbl&gt;, …",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#agrupando-dados-com-group_by",
    "href": "intro-r/dia-2.html#agrupando-dados-com-group_by",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.9 Agrupando dados com group_by()",
    "text": "3.9 Agrupando dados com group_by()\nA função group_by() é utilizada para agrupar os dados com base em uma ou mais colunas. Isso é especialmente útil quando queremos aplicar funções de resumo a cada grupo.\nPor exemplo, podemos agrupar os dados por colunas relacionado aos partidos:\n\ndados |&gt;\n  group_by(SG_PARTIDO, NM_PARTIDO) \n\n# A tibble: 1,016 × 51\n# Groups:   SG_PARTIDO, NM_PARTIDO [29]\n   DT_GERACAO HH_GERACAO ANO_ELEICAO CD_TIPO_ELEICAO NM_TIPO_ELEICAO   NR_TURNO\n   &lt;chr&gt;      &lt;time&gt;           &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n 1 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 2 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 3 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 4 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 5 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 6 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 7 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 8 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n 9 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n10 18/07/2025 12:30:11          2024               2 ELEIÇÃO ORDINÁRIA        1\n# ℹ 1,006 more rows\n# ℹ 45 more variables: CD_ELEICAO &lt;dbl&gt;, DS_ELEICAO &lt;chr&gt;, DT_ELEICAO &lt;chr&gt;,\n#   TP_ABRANGENCIA &lt;chr&gt;, SG_UF &lt;chr&gt;, SG_UE &lt;dbl&gt;, NM_UE &lt;chr&gt;,\n#   CD_CARGO &lt;dbl&gt;, DS_CARGO &lt;chr&gt;, SQ_CANDIDATO &lt;dbl&gt;, NR_CANDIDATO &lt;dbl&gt;,\n#   NM_CANDIDATO &lt;chr&gt;, NM_URNA_CANDIDATO &lt;chr&gt;, NM_SOCIAL_CANDIDATO &lt;chr&gt;,\n#   NR_CPF_CANDIDATO &lt;dbl&gt;, DS_EMAIL &lt;chr&gt;, CD_SITUACAO_CANDIDATURA &lt;dbl&gt;,\n#   DS_SITUACAO_CANDIDATURA &lt;chr&gt;, TP_AGREMIACAO &lt;chr&gt;, NR_PARTIDO &lt;dbl&gt;, …\n\n\nA função group_by() não altera os dados, mas prepara o data frame para que possamos aplicar funções de resumo a cada grupo. Portanto, ela é frequentemente utilizada em conjunto com a função summarise().\nObs: após usar a função group_by(), é importante lembrar de utilizar a função ungroup() para remover o agrupamento, caso não seja mais necessário. Isso pode evitar problemas em operações futuras.",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#resumindo-dados-com-summarise",
    "href": "intro-r/dia-2.html#resumindo-dados-com-summarise",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.10 Resumindo dados com summarise()",
    "text": "3.10 Resumindo dados com summarise()\nA função summarise() é utilizada para resumir os dados, calculando estatísticas agregadas. Ela é frequentemente utilizada em conjunto com a função group_by().\n\ndados_por_partido &lt;- dados |&gt;\n  # agrupando por colunas com informações dos partidos\n  group_by(SG_PARTIDO, NM_PARTIDO) |&gt; \n  summarise(\n    # contando o número de candidatos por grupo\n    quantidade_candidatos = n(),  \n    quantidade_eleitos = sum(DS_SIT_TOT_TURNO %in% c(\"ELEITO POR QP\", \"ELEITO POR MÉDIA\"), na.rm = TRUE),  # contando o número de candidatos eleitos\n    \n    media_votos_por_cand = mean(SOMA_QT_VOTOS_NOMINAIS_VALIDOS, na.rm = TRUE),  # calculando a média de votos válidos\n    mediana_votos_por_cand = median(SOMA_QT_VOTOS_NOMINAIS_VALIDOS, na.rm = TRUE),  # calculando a mediana de votos válidos\n    soma_votos = sum(SOMA_QT_VOTOS_NOMINAIS_VALIDOS, na.rm = TRUE)  # somando os votos válidos\n  ) |&gt; \n   # removendo o agrupamento\n  ungroup() |&gt; \n  arrange(desc(quantidade_eleitos), desc(soma_votos))\n\n`summarise()` has grouped output by 'SG_PARTIDO'. You can override using the\n`.groups` argument.\n\ndados_por_partido\n\n# A tibble: 29 × 7\n   SG_PARTIDO   NM_PARTIDO              quantidade_candidatos quantidade_eleitos\n   &lt;chr&gt;        &lt;chr&gt;                                   &lt;int&gt;              &lt;int&gt;\n 1 PT           PARTIDO DOS TRABALHADO…                    48                  8\n 2 UNIÃO        UNIÃO BRASIL                               46                  7\n 3 MDB          MOVIMENTO DEMOCRÁTICO …                    57                  7\n 4 PL           PARTIDO LIBERAL                            56                  7\n 5 PODE         PODEMOS                                    56                  6\n 6 PSOL         PARTIDO SOCIALISMO E L…                    48                  6\n 7 PP           PROGRESSISTAS                              38                  4\n 8 PSD          PARTIDO SOCIAL DEMOCRÁ…                    32                  3\n 9 REPUBLICANOS REPUBLICANOS                               47                  2\n10 PSB          PARTIDO SOCIALISTA BRA…                    56                  2\n# ℹ 19 more rows\n# ℹ 3 more variables: media_votos_por_cand &lt;dbl&gt;, mediana_votos_por_cand &lt;dbl&gt;,\n#   soma_votos &lt;dbl&gt;\n\n# Checando o número de eleitos\nsum(dados_por_partido$quantidade_eleitos)\n\n[1] 55",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#extra-count",
    "href": "intro-r/dia-2.html#extra-count",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.11 Extra: count()",
    "text": "3.11 Extra: count()\nA função count() é uma forma simplificada de usar group_by() e summarise(). Ela conta o número de ocorrências de cada grupo e retorna um data frame com as contagens. Por exemplo:\n\ndados_vereadores_eleitos |&gt;\n  count(DS_GENERO) \n\n# A tibble: 2 × 2\n  DS_GENERO     n\n  &lt;chr&gt;     &lt;int&gt;\n1 FEMININO     20\n2 MASCULINO    35\n\n\n\ndados_vereadores_eleitos |&gt;\n  count(DS_GRAU_INSTRUCAO) \n\n# A tibble: 3 × 2\n  DS_GRAU_INSTRUCAO         n\n  &lt;chr&gt;                 &lt;int&gt;\n1 ENSINO MÉDIO COMPLETO     5\n2 SUPERIOR COMPLETO        46\n3 SUPERIOR INCOMPLETO       4\n\n\n\ndados_vereadores_eleitos |&gt;\n  count(DS_COR_RACA) \n\n# A tibble: 4 × 2\n  DS_COR_RACA     n\n  &lt;chr&gt;       &lt;int&gt;\n1 AMARELA         1\n2 BRANCA         38\n3 PARDA          10\n4 PRETA           6",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "intro-r/dia-2.html#escrevendo-dados-com-write_csv-ou-writexlwrite_xlsx",
    "href": "intro-r/dia-2.html#escrevendo-dados-com-write_csv-ou-writexlwrite_xlsx",
    "title": "3  Dia 2 - Importação e transformação",
    "section": "3.12 Escrevendo dados com write_csv() ou writexl::write_xlsx()",
    "text": "3.12 Escrevendo dados com write_csv() ou writexl::write_xlsx()\nPodemos salvar o resultado em um arquivo CSV ou Excel, utilizando as funções readr::write_csv() ou writexl::write_xlsx():\n\nwrite_csv(dados_por_partido,\n          \"dados/tab-dados_por_partido.csv\")\n\nwritexl::write_xlsx(dados_por_partido,\n                    \"dados/tab-dados_por_partido.xlsx\")",
    "crumbs": [
      "Introdução ao R para análise de dados",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dia 2 - Importação e transformação</span>"
    ]
  },
  {
    "objectID": "visualizacao/index.html",
    "href": "visualizacao/index.html",
    "title": "Introdução à elaboração de gráficos com ggplot2 e R",
    "section": "",
    "text": "Descrição\nNesta oficina, será apresentado o pacote ggplot2 em R. Este pacote é um dos mais populares para visualização de dados e permite a criação de gráficos de alta qualidade, como histogramas, boxplots, gráficos de dispersão e de barras. A oficina é voltada para iniciantes, porém é necessário ter conhecimento básico de R.",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R"
    ]
  },
  {
    "objectID": "visualizacao/index.html#conteúdos",
    "href": "visualizacao/index.html#conteúdos",
    "title": "Introdução à elaboração de gráficos com ggplot2 e R",
    "section": "Conteúdos",
    "text": "Conteúdos\n\nDia 1: Conhecendo o ggplot2\nDia 2: Customizando gráficos com ggplot2",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R"
    ]
  },
  {
    "objectID": "visualizacao/dia-1.html",
    "href": "visualizacao/dia-1.html",
    "title": "4  Dia 1 - Conhecendo o ggplot2",
    "section": "",
    "text": "4.1 Carregando pacotes\nO pacote tidyverse é um conjunto de pacotes, e nele encontramos pacotes úteis para essa oficina, como o readr, dplyr e ggplot2. Vamos carregá-lo:\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dia 1 - Conhecendo o ggplot2</span>"
    ]
  },
  {
    "objectID": "visualizacao/dia-1.html#importando-dados",
    "href": "visualizacao/dia-1.html#importando-dados",
    "title": "4  Dia 1 - Conhecendo o ggplot2",
    "section": "4.2 Importando dados",
    "text": "4.2 Importando dados\nOs dados que utilizaremos nesta oficina são referentes à taxa de desocupação no Brasil, coletados do SIDRA. A forma de importação e preparação dos dados está disponível no arquivo visualizacao/dados/prep-dados.R no repositório do curso.\n\n\n\n\n\n\nExpanda para fazer download da base de dados\n\n\n\n\n\n\ndownload.file(\n1  url = \"https://github.com/beatrizmilz/2025-07-fbcp/raw/refs/heads/main/visualizacao/dados/sidra_4092_arrumado.rds\",\n2  destfile = \"dados/sidra_4092_arrumado.rds\",\n3  mode = \"wb\"\n  )\n\n\n1\n\nURL que desejamos baixar\n\n2\n\nCaminho onde queremos baixar o arquivo (diretório + nome do arquivo + extensão do arquivo)\n\n3\n\nConfiguração que evita corromper arquivos binários.\n\n\n\n\n\n\n\nVamos carregar a base de dados com a função read_rds():\n\n1dados &lt;- read_rds(\"dados/sidra_4092_arrumado.rds\")\n2glimpse(dados)\n\n\n1\n\nImportando os dados\n\n2\n\nEspiando a tabela: quantas colunas tem? quantas linhas? quais são as variáveis?\n\n\n\n\nRows: 1,431\nColumns: 16\n$ uf                                       &lt;chr&gt; \"Amapá\", \"Bahia\", \"Rio Grande…\n$ uf_codigo                                &lt;fct&gt; 16, 29, 24, 27, 13, 28, 25, 2…\n$ uf_sigla                                 &lt;chr&gt; \"AP\", \"BA\", \"RN\", \"AL\", \"AM\",…\n$ regiao                                   &lt;chr&gt; \"Norte\", \"Nordeste\", \"Nordest…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"1º trim…\n$ trimestre_codigo                         &lt;chr&gt; \"201201\", \"201201\", \"201201\",…\n$ ano                                      &lt;dbl&gt; 2012, 2012, 2012, 2012, 2012,…\n$ trimestre_inicio                         &lt;date&gt; 2012-01-01, 2012-01-01, 2012…\n$ mil_pessoas_total                        &lt;dbl&gt; 487, 10986, 2540, 2383, 2463,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 318, 6888, 1370, 1173, 1558, …\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 278, 6086, 1211, 1041, 1386, …\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 40, 802, 159, 133, 173, 99, 1…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 170, 4098, 1170, 1210, 905, 6…\n$ prop_desocupacao                         &lt;dbl&gt; 0.12578616, 0.11643438, 0.116…\n$ perc_desocupacao                         &lt;dbl&gt; 12.578616, 11.643438, 11.6058…\n$ periodo_pandemia                         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\nVamos criar também um objeto contendo apenas aos dados referentes ao trimestre mais recente, para usar em alguns exemplos:\n\ndados_tri_recente &lt;- dados |&gt;  \n1  filter(trimestre_inicio == max(trimestre_inicio))\n\n\n1\n\nFiltrando os dados para o trimestre mais recente",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dia 1 - Conhecendo o ggplot2</span>"
    ]
  },
  {
    "objectID": "visualizacao/dia-1.html#o-que-é-o-ggplot2",
    "href": "visualizacao/dia-1.html#o-que-é-o-ggplot2",
    "title": "4  Dia 1 - Conhecendo o ggplot2",
    "section": "4.3 O que é o ggplot2?",
    "text": "4.3 O que é o ggplot2?\nO ggplot2 é o principal pacote para criação de gráficos em R. Ele é baseado na gramática de gráficos, uma teoria que apresenta uma forma de descrever os componentes de um gráfico.\nO ggplot2 faz parte do tidyverse.",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dia 1 - Conhecendo o ggplot2</span>"
    ]
  },
  {
    "objectID": "visualizacao/dia-1.html#vocabulário-do-ggplot2",
    "href": "visualizacao/dia-1.html#vocabulário-do-ggplot2",
    "title": "4  Dia 1 - Conhecendo o ggplot2",
    "section": "4.4 Vocabulário do ggplot2",
    "text": "4.4 Vocabulário do ggplot2\nA gramática de gráficos é composta por alguns elementos, sendo os seguintes principais para iniciar:\n\nDados: um data frame que contém os dados que serão apresentados\nAesthetics (atributos estéticos): mapeamento dos dados para propriedades visuais do gráfico, como eixos, cor, forma e tamanho\nGeometrias: formas geométricas que representam os dados, como pontos, linhas e barras.\n\nVamos fazer um exemplo simples, explorando cada um desses elementos. Para iniciar o gráfico, podemos informar os dados para a função ggplot():\n\ndados_tri_recente |&gt;\n  ggplot()\n\n\n\n\n\n\n\n\nA função ggplot() cria um objeto gráfico vazio. Para informar quais são as variáveis que serão mapeadas nos eixos x e y, utilizamos a função aes():\n\ndados_tri_recente |&gt;\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf)\n\n\n\n\n\n\n\n\nO gráfico criado apresenta os eixos, e os valores possíveis. Porém ainda não tem nenhuma geometria para representar os dados. Para adicionar uma geometria ao gráfico, utilizamos funções da família geom_*. Nesse caso, vamos utilizar a função geom_col() para criar um gráfico de colunas:\n\n1dados_tri_recente |&gt;\n2  ggplot() +\n3  aes(x = perc_desocupacao, y = uf) +\n4  geom_col()\n\n\n1\n\nDados: dados que serão utilizados\n\n2\n\nggplot(): função para iniciar o gráfico\n\n3\n\nAesthetics (atributos estéticos): informando quais variáveis serão utilizadas nos eixos x e y\n\n4\n\nGeometria do gráfico: informando que faremos um gráfico de colunas\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDica\n\n\n\nAtenção: Observe que a cada linha de código, adicionamos um + para adicionar um novo elemento ao gráfico.\nA partir da função ggplot(), sempre utilizamos + para adicionar novos elementos ao gráfico.",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dia 1 - Conhecendo o ggplot2</span>"
    ]
  },
  {
    "objectID": "visualizacao/dia-1.html#criando-gráficos-exploratórios",
    "href": "visualizacao/dia-1.html#criando-gráficos-exploratórios",
    "title": "4  Dia 1 - Conhecendo o ggplot2",
    "section": "4.5 Criando gráficos exploratórios",
    "text": "4.5 Criando gráficos exploratórios\nVamos criar alguns gráficos exploratórios com os dados de desocupação por trimestre e por estado.\nGráficos exploratórios são utilizados para entender melhor os dados, identificar padrões e tendências, e verificar a presença de outliers. Neste momento, não estamos preocupados com a estética do gráfico, mas sim com a interpretação dos dados.\n\n4.5.1 Tipos de gráficos\n\n4.5.1.1 Gráficos de dispersão\nVamos começar criando um gráfico de dispersão (conhecido também como gráfico de pontos). Para isso, utilizaremos a função ggplot() e a função geom_point().\nO gráfico de dispersão é utilizado para visualizar a relação entre duas variáveis quantitativas.\n\ndados |&gt;\n  filter(uf_sigla == \"SP\") |&gt;\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n4.5.1.2 Gráficos de linha\nGráficos de linha são muito utilizados para representar uma variável ao longo do tempo. A função de geometria utilizada é a geom_line().\nVamos criar um gráfico de linha para visualizar a evolução da taxa de desocupação ao longo dos trimestres para apenas um estado:\n\ndados |&gt; \n  filter(uf_sigla == \"SP\") |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line()\n\n\n\n\n\n\n\n\nE se quisermos ver para todos os estados? Nesse caso, é importante usar um argumento adicional na função aes(), o group, para que o ggplot2 saiba que queremos uma linha para cada estado.\n\ndados |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(aes(group = uf))\n\n\n\n\n\n\n\n\n\n\n\n4.5.2 Combinando geometrias\nPodemos combinar diferentes geometrias no mesmo gráfico. Por exemplo, podemos adicionar um gráfico de pontos ao gráfico de linhas que criamos anteriormente:\n\ndados |&gt; \n  filter(uf_sigla == \"SP\") |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(color = \"red\") +\n  geom_point(color = \"blue\")\n\n\n\n\n\n\n\n\nOutro ponto importante é que a ordem das geometrias importa! No exemplo acima, a linha é desenhada primeiro, e os pontos são adicionados por cima da linha. Se trocarmos a ordem das geometrias, os pontos serão desenhados primeiro, e a linha será desenhada por cima dos pontos.\n\ndados |&gt; \n  filter(uf_sigla == \"SP\") |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_point(color = \"blue\") +\n  geom_line(color = \"red\")\n\n\n\n\n\n\n\n\n\n\n4.5.3 Gráficos de barras/colunas\nPara os gráficos de barras/colunas, podemos utilizar duas funções: geom_bar() e geom_col(). A diferença entre elas é que geom_bar() é utilizada quando queremos contar a frequência de uma variável categórica, enquanto geom_col() é utilizada quando queremos visualizar uma variável numérica.\nVamos criar um gráfico de colunas para visualizar a taxa de desocupação dos estados no trimestre mais recente. Como já temos a coluna com o valor numérico que queremos visualizar (perc_desocupacao), utilizaremos a função geom_col():\n\ndados_tri_recente |&gt; \n  ggplot() + \n  aes(y = uf, x = perc_desocupacao) + \n  geom_col()\n\n\n\n\n\n\n\n\nA função geom_bar() é utilizada para representar contagens. Vamos responder a seguinte pergunta de exemplo: quantas vezes cada estado apresentou uma taxa de desocupação maior ou igual à 20%? Para isso, precisamos filtrar os dados antes de criar o gráfico, e a função geom_bar() será utilizada para contar a frequência de cada estado. Os estados que não aparecerem no gráfico é porque não tiveram nenhuma taxa de desocupação maior ou igual à 20%, no período que temos dados.\n\ndados |&gt; \n  filter(perc_desocupacao &gt;= 20) |&gt;\n  ggplot() + \n  aes(x = uf) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n4.5.4 Gráfico de histograma\nO histograma é um gráfico que mostra a distribuição de uma variável numérica. A função de geometria utilizada é a geom_histogram().\nPodemos visualizar a distribuição da variável perc_desocupacao, considerando todos os trimestres:\n\ndados |&gt; \n  ggplot() + \n  aes(x = perc_desocupacao) + \n  geom_histogram(binwidth = 1)\n\n\n\n\n\n\n\n\nOutro tipo de gráfico que pode ser utilizado para visualizar a distribuição de uma variável numérica é o gráfico de densidade. A função de geometria utilizada é a geom_density().\n\ndados |&gt; \n  ggplot() + \n  aes(x = perc_desocupacao) + \n  geom_density()\n\n\n\n\n\n\n\n\n\n\n4.5.5 Gráficos de caixa (boxplot)\nO gráfico de caixa1 (mais conhecido como boxplot) é utilizado para visualizar a distribuição de uma variável numérica. Esse é um tipo de gráfico que não é muito comum vermos no dia-a-dia, mas é muito usado em pesquisas e análises estatísticas.\nEste gráfico apresenta informações como a mediana, quartis, valores mínimos e máximos, e possíveis outliers.\nPara criar um boxplot, utilizaremos a função de geometria geom_boxplot()\n\ndados |&gt; \n  ggplot() + \n  aes(y = regiao, x = perc_desocupacao) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n4.5.6 Gráficos por subgrupos\n\n4.5.6.1 Subgrupos por Cor\nPodemos adicionar mais uma variável ao gráfico, utilizando a cor para representá-la. Para isso, utilizamos os argumentos fill ou color dentro da função aes():\n\nfill: preenche a área com a cor. Útil para gráficos de barras e colunas, por exemplo.\ncolor: adiciona a cor ao contorno. Útil para gráficos de linhas e pontos, por exemplo.\n\nVamos ver um exemplo de gráfico de colunas apresentado anteriormente, com preenchimento (fill) por região:\n\ndados_tri_recente |&gt;\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf) + \n1  geom_col(aes(fill = regiao))\n\n\n1\n\nAdicionando a cor de preenchimento utilizando a coluna regiao, com o argumento fill. Isso precisa estar DENTRO do aes().\n\n\n\n\n\n\n\n\n\n\n\nVamos ver um exemplo de gráfico de linhas apresentado anteriormente, adicionamos pontos e usamos a cor para representar o período que consideramos como pandemia (color):\n\ndados |&gt; \n1  filter(uf_sigla == \"SP\") |&gt;\n  mutate(periodo_pandemia = as.character(periodo_pandemia)) |&gt;\n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line() +\n2  geom_point(aes(color = periodo_pandemia))\n\n\n1\n\nFiltrando dados para representar apenas a Bahia.\n\n2\n\nAdicionando a cor do ponto utilizando a coluna periodo_pandemia, com o argumento color. Isso precisa estar DENTRO do aes().\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.6.2 Subgrupos por Facetas (facet)\nAs facetas (ou facet) são utilizadas para dividir o gráfico em subgráficos, com base nos valores de uma ou duas variáveis categóricas.\nExistem duas funções principais para criar facetas: facet_wrap() ou facet_grid().\nA função facet_wrap() cria uma faceta para cada categoria da variável:\n\ndados |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(aes(group = uf)) + \n1  facet_wrap(~regiao)\n\n\n1\n\nAdicionando a função facet_wrap() para criar um gráfico para cada categoria da variável regiao.\n\n\n\n\n\n\n\n\n\n\n\nVeja que o gráfico é dividido em 5 subgráficos, um para cada região do Brasil. Os valores dos eixos x e y são os mesmos para todos os subgráficos, possibilitando a comparação entre eles.\nJá a função facet_grid() cria um gráfico para cada combinação de categorias de duas variáveis.\n\ndados |&gt; \n  ggplot() + \n  aes(y = perc_desocupacao) + \n  geom_boxplot() + \n1  facet_grid(regiao ~ periodo_pandemia)\n\n\n1\n\nAdicionando a função facet_grid() para criar um gráfico para cada combinação de categorias das variáveis regiao e periodo_pandemia.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5.7 Revisão\nA partir dos exemplos apresentados, podemos listar alguns pontos importantes sobre o ggplot2:\n\nA função ggplot() cria um objeto gráfico vazio\nPodemos usar o pipe (%&gt;% ou |&gt;) para encadear as funções até a função ggplot().\nA partir da função ggplot(), não usamos mais o pipe (%&gt;% ou |&gt;), e sim o +.\nA função aes() define o mapeamento estético (aesthetics mapping) entre as colunas da base de dados (variáveis) e os elementos visuais do gráfico (eixo, posição, cor, tamanho, etc).\nOs atributos estéticos (aes) x e y representam os eixos x e y do gráfico.\nPara adicionar uma geometria ao gráfico, usamos alguma função da família geom_*.\nPodemos usar mais do que uma geometria no mesmo gráfico, e a ordem importa!",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dia 1 - Conhecendo o ggplot2</span>"
    ]
  },
  {
    "objectID": "visualizacao/dia-1.html#visualizando-os-dados",
    "href": "visualizacao/dia-1.html#visualizando-os-dados",
    "title": "4  Dia 1 - Conhecendo o ggplot2",
    "section": "4.6 Visualizando os dados",
    "text": "4.6 Visualizando os dados\nPara quem está começando, recomendo utilizar o pacote esquisse, que facilita a criação de gráficos com o ggplot2.\n\ninstall.packages(\"esquisse\", dependencies =  TRUE)\n\nDepois de instalar o pacote, podemos carregá-lo e utilizar a função esquisser() para criar gráficos interativos:\n\nlibrary(esquisse)\nesquisser(dados)\n\nO esquisse oferece uma interface amigável para criar gráficos com o ggplot2, permitindo que você arraste e solte variáveis, escolha tipos de gráficos e customize os elementos do gráfico. Ao usar o esquisse, você pode gerar o código correspondente ao gráfico que está criando, e depois copiá-lo para o seu script R.",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dia 1 - Conhecendo o ggplot2</span>"
    ]
  },
  {
    "objectID": "visualizacao/dia-1.html#footnotes",
    "href": "visualizacao/dia-1.html#footnotes",
    "title": "4  Dia 1 - Conhecendo o ggplot2",
    "section": "",
    "text": "Caso queira saber mais sobre o gráfico de caixa / boxplot, recomendo a leitura deste texto escrito pela Fernanda Peres, sobre como interpretar o boxplot.↩︎",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dia 1 - Conhecendo o ggplot2</span>"
    ]
  },
  {
    "objectID": "visualizacao/dia-2.html",
    "href": "visualizacao/dia-2.html",
    "title": "5  Dia 2 - Customizando gráficos com ggplot2",
    "section": "",
    "text": "5.1 Carregando pacotes\nO pacote tidyverse é um conjunto de pacotes, e nele encontramos pacotes úteis para essa oficina, como o readr, dplyr e ggplot2. Vamos carregá-lo:\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dia 2 - Customizando gráficos com ggplot2</span>"
    ]
  },
  {
    "objectID": "visualizacao/dia-2.html#importando-dados",
    "href": "visualizacao/dia-2.html#importando-dados",
    "title": "5  Dia 2 - Customizando gráficos com ggplot2",
    "section": "5.2 Importando dados",
    "text": "5.2 Importando dados\nVamos carregar a base de dados com a função read_rds():\n\n1dados &lt;- read_rds(\"dados/sidra_4092_arrumado.rds\")\n2glimpse(dados)\n\n\n1\n\nImportando os dados\n\n2\n\nEspiando a tabela: quantas colunas tem? quantas linhas? quais são as variáveis?\n\n\n\n\nRows: 1,431\nColumns: 16\n$ uf                                       &lt;chr&gt; \"Amapá\", \"Bahia\", \"Rio Grande…\n$ uf_codigo                                &lt;fct&gt; 16, 29, 24, 27, 13, 28, 25, 2…\n$ uf_sigla                                 &lt;chr&gt; \"AP\", \"BA\", \"RN\", \"AL\", \"AM\",…\n$ regiao                                   &lt;chr&gt; \"Norte\", \"Nordeste\", \"Nordest…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"1º trim…\n$ trimestre_codigo                         &lt;chr&gt; \"201201\", \"201201\", \"201201\",…\n$ ano                                      &lt;dbl&gt; 2012, 2012, 2012, 2012, 2012,…\n$ trimestre_inicio                         &lt;date&gt; 2012-01-01, 2012-01-01, 2012…\n$ mil_pessoas_total                        &lt;dbl&gt; 487, 10986, 2540, 2383, 2463,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 318, 6888, 1370, 1173, 1558, …\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 278, 6086, 1211, 1041, 1386, …\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 40, 802, 159, 133, 173, 99, 1…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 170, 4098, 1170, 1210, 905, 6…\n$ prop_desocupacao                         &lt;dbl&gt; 0.12578616, 0.11643438, 0.116…\n$ perc_desocupacao                         &lt;dbl&gt; 12.578616, 11.643438, 11.6058…\n$ periodo_pandemia                         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\nVamos criar também um objeto contendo apenas aos dados referentes ao trimestre mais recente, para usar em alguns exemplos:\n\ndados_tri_recente &lt;- dados |&gt;  \n1  filter(trimestre_inicio == max(trimestre_inicio))\n\n\n1\n\nFiltrando os dados para o trimestre mais recente",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dia 2 - Customizando gráficos com ggplot2</span>"
    ]
  },
  {
    "objectID": "visualizacao/dia-2.html#customizando-gráficos",
    "href": "visualizacao/dia-2.html#customizando-gráficos",
    "title": "5  Dia 2 - Customizando gráficos com ggplot2",
    "section": "5.3 Customizando gráficos",
    "text": "5.3 Customizando gráficos\nAté aqui, discutimos como criar gráficos exploratórios, e vimos que o ggplot2 nos permite criar gráficos de forma simples e rápida.\nApós criar um gráfico exploratório que nos ajuda a entender os dados, podemos customizá-lo para apresentar a outras pessoas, ou para publicar em relatórios e artigos.\nVamos ver algumas formas de customizar os gráficos criados, partindo do gráfico a seguir:\n\ngrafico_base &lt;- dados_tri_recente |&gt; \n  ggplot() + \n  aes(y = uf, x = perc_desocupacao) + \n  geom_col()\n\ngrafico_base\n\n\n\n\n\n\n\n\n\n5.3.1 Ordenando as barras\nO ggplot ordena variáveis de texto em ordem alfabética. No exemplo acima, as barras estão ordenadas de acordo com a ordem alfabética dos estados: o Acre aparece primeiro, e o Tocantins, por último.\nPodemos ordenar as barras do gráfico de colunas de acordo com o valor da variável numérica utilizada (neste caso, perc_desocupacao).\nPara isso, precisaremos transformar a variável de texto uf em uma variável categórica ordenada (ou seja, um fator/factor).\n\n5.3.1.1 Fatores / factors\nOs fatores são utilizados para representar variáveis categóricas no R. Essas variáveis podem ser ordenadas ou não.\nEles são úteis para controlar a ordem de exibição de variáveis categóricas em gráficos, tabelas e modelos estatísticos.\nVamos criar um exemplo simples, criando uma tabela com a escolaridade de um grupo de pessoas:\n\nescolaridade &lt;- tibble(\n  nome = c(\n    \"Maria\",\n    \"João\",\n    \"Pedro\",\n    \"Ana\",\n    \"José\",\n    \"Carlos\",\n    \"Mariana\",\n    \"Lucas\"\n  ),\n  escolaridade_concluida = c(\n    \"Pós-graduação\",\n    \"Ensino Médio\",\n    \"Ensino Fundamental II\",\n    \"Ensino Fundamental I\",\n    \"Ensino Fundamental I\",\n    \"Sem instrução\",\n    \"Ensino Técnico\",\n    \"Graduação\"\n  )\n)\n\nSe ordenarmos a tabela pela variável escolaridade_concluida, veremos que a ordem é alfabética:\n\nescolaridade |&gt; \n  arrange(escolaridade_concluida)\n\n# A tibble: 8 × 2\n  nome    escolaridade_concluida\n  &lt;chr&gt;   &lt;chr&gt;                 \n1 Ana     Ensino Fundamental I  \n2 José    Ensino Fundamental I  \n3 Pedro   Ensino Fundamental II \n4 João    Ensino Médio          \n5 Mariana Ensino Técnico        \n6 Lucas   Graduação             \n7 Maria   Pós-graduação         \n8 Carlos  Sem instrução         \n\n\nPara que, por exemplo, a variável escolaridade_concluida seja ordenada de acordo com a ordem de escolaridade, podemos transformá-la em um fator ordenado, utilizando a função factor(), e indicando quais são os níveis (levels) de escolaridade, na ordem que queremos que apareçam:\n\nescolaridade |&gt;\n  mutate(\n1  escolaridade_concluida_fct = factor(\n2    escolaridade_concluida,\n3    levels = c(\n      \"Sem instrução\", \n      \"Ensino Fundamental I\", \n      \"Ensino Fundamental II\", \n      \"Ensino Médio\", \n      \"Ensino Técnico\", \n      \"Graduação\", \n      \"Pós-graduação\" \n      )\n    )\n  ) |&gt; \n4  arrange(escolaridade_concluida_fct)\n\n\n1\n\nCriando uma nova variável escolaridade_concluida_fct usando a função factor()\n\n2\n\nVariável que será transformada em fator\n\n3\n\nNíveis de escolaridade, na ordem que queremos que apareçam\n\n4\n\nOrdenando a tabela pela variável escolaridade_concluida_fct\n\n\n\n\n# A tibble: 8 × 3\n  nome    escolaridade_concluida escolaridade_concluida_fct\n  &lt;chr&gt;   &lt;chr&gt;                  &lt;fct&gt;                     \n1 Carlos  Sem instrução          Sem instrução             \n2 Ana     Ensino Fundamental I   Ensino Fundamental I      \n3 José    Ensino Fundamental I   Ensino Fundamental I      \n4 Pedro   Ensino Fundamental II  Ensino Fundamental II     \n5 João    Ensino Médio           Ensino Médio              \n6 Mariana Ensino Técnico         Ensino Técnico            \n7 Lucas   Graduação              Graduação                 \n8 Maria   Pós-graduação          Pós-graduação             \n\n\nA função factor() é do R base, ou seja, não precisamos carregar nenhum pacote adicional para utilizá-la. Porém o pacote {forcats} (que faz parte do {tidyverse}) apresenta funções mais avançadas para trabalhar com fatores, como a função fct_reorder() que veremos a seguir.\n\n\n5.3.1.2 Voltando ao exemplo do gráfico de colunas\nPara isso, precisamos fazer uma transformação na variável uf, para que ela seja ordenada de acordo com o valor de perc_desocupacao. Isso deve ser feito antes de criar o gráfico.\nVamos ordenar as barras do gráfico anterior, de acordo com o valor de perc_desocupacao. Para isso, utilizamos a função fct_reorder() do pacote {forcats}.\nA função fct_reorder() recebe dois argumentos:\n\nA variável que queremos ordenar (a variável categórica que é representada em cada coluna)\nA variável que será utilizada para ordenar a primeira variável (a variável numérica que será utilizada para ordenar a variável categórica)\n\nNo caso do nosso exemplo, queremos ordenar as barras de acordo com o valor de perc_desocupacao, e a variável categórica que queremos ordenar é uf. Portanto, usaremos fct_reorder(uf, perc_desocupacao).\n\ngrafico_ordenado &lt;- dados_tri_recente |&gt; \n1  mutate(uf_fct = fct_reorder(uf, perc_desocupacao)) |&gt;\n  ggplot() + \n2  aes(y = uf_fct, x = perc_desocupacao) +\n  geom_col()\n\ngrafico_ordenado\n\n\n1\n\nComo explicado acima, criamos uma nova variável uf_fct que será utilizada para ordenar as barras de acordo com o valor de perc_desocupacao.\n\n2\n\nUtilizaremos no eixo y a variável criada: uf_fct.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.3.2 Títulos e rótulos\nPor padrão, o gráfico está sem título, e com o nome das colunas nos eixos x e y e legendas.\nO ggplot2 permite adicionar títulos e rótulos aos gráficos, utilizando a função labs(). Essa função apresenta vários argumentos, que podem ser divididos em dois grupos:\n\nElementos com informações do gráficos: sempre estão disponíveis. Ex: title, subtitle, caption…\nElementos relacionados aos atributos estéticos: dependem dos mapeamentos feitos com a função aes(). Ex: x, y, fill, color…\n\nVamos adicionar um título ao gráfico anterior, e rótulos para os eixos x e y:\n\ngrafico_com_labels &lt;- grafico_ordenado + \n  labs(\n1    title = \"Taxa de desocupação por estado\",\n    subtitle = \"Dados para o 2º trimestre 2024\",\n    caption = \"Fonte: Dados referentes à PNAD Contínua Trimestral, obtidos no SIDRA/IBGE.\",\n2    x = \"Taxa de desocupação (%)\",\n    y = \"Estado\",\n  )\n\ngrafico_com_labels\n\n\n1\n\nInformações sobre o gráfico\n\n2\n\nAtributos estéticos utilizados\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.3.3 Escalas\nO {ggplot2} apresenta várias funções para trabalhar com as escalas dos gráficos. Essas funções apresentam o prefixo scale_.\nVamos explorar algumas dessas funções para trabalhar com escalas, mas lembre-se que existem muitas outras funções para customizar as escalas dos gráficos.\n\n\n\n\n\n\nLista de funções para escalas no ggplot2\n\n\n\n\n\n\nls(\"package:ggplot2\") |&gt; \n  stringr::str_subset(\"^scale_\")\n\n  [1] \"scale_alpha\"                \"scale_alpha_binned\"        \n  [3] \"scale_alpha_continuous\"     \"scale_alpha_date\"          \n  [5] \"scale_alpha_datetime\"       \"scale_alpha_discrete\"      \n  [7] \"scale_alpha_identity\"       \"scale_alpha_manual\"        \n  [9] \"scale_alpha_ordinal\"        \"scale_color_binned\"        \n [11] \"scale_color_brewer\"         \"scale_color_continuous\"    \n [13] \"scale_color_date\"           \"scale_color_datetime\"      \n [15] \"scale_color_discrete\"       \"scale_color_distiller\"     \n [17] \"scale_color_fermenter\"      \"scale_color_gradient\"      \n [19] \"scale_color_gradient2\"      \"scale_color_gradientn\"     \n [21] \"scale_color_grey\"           \"scale_color_hue\"           \n [23] \"scale_color_identity\"       \"scale_color_manual\"        \n [25] \"scale_color_ordinal\"        \"scale_color_steps\"         \n [27] \"scale_color_steps2\"         \"scale_color_stepsn\"        \n [29] \"scale_color_viridis_b\"      \"scale_color_viridis_c\"     \n [31] \"scale_color_viridis_d\"      \"scale_colour_binned\"       \n [33] \"scale_colour_brewer\"        \"scale_colour_continuous\"   \n [35] \"scale_colour_date\"          \"scale_colour_datetime\"     \n [37] \"scale_colour_discrete\"      \"scale_colour_distiller\"    \n [39] \"scale_colour_fermenter\"     \"scale_colour_gradient\"     \n [41] \"scale_colour_gradient2\"     \"scale_colour_gradientn\"    \n [43] \"scale_colour_grey\"          \"scale_colour_hue\"          \n [45] \"scale_colour_identity\"      \"scale_colour_manual\"       \n [47] \"scale_colour_ordinal\"       \"scale_colour_steps\"        \n [49] \"scale_colour_steps2\"        \"scale_colour_stepsn\"       \n [51] \"scale_colour_viridis_b\"     \"scale_colour_viridis_c\"    \n [53] \"scale_colour_viridis_d\"     \"scale_continuous_identity\" \n [55] \"scale_discrete_identity\"    \"scale_discrete_manual\"     \n [57] \"scale_fill_binned\"          \"scale_fill_brewer\"         \n [59] \"scale_fill_continuous\"      \"scale_fill_date\"           \n [61] \"scale_fill_datetime\"        \"scale_fill_discrete\"       \n [63] \"scale_fill_distiller\"       \"scale_fill_fermenter\"      \n [65] \"scale_fill_gradient\"        \"scale_fill_gradient2\"      \n [67] \"scale_fill_gradientn\"       \"scale_fill_grey\"           \n [69] \"scale_fill_hue\"             \"scale_fill_identity\"       \n [71] \"scale_fill_manual\"          \"scale_fill_ordinal\"        \n [73] \"scale_fill_steps\"           \"scale_fill_steps2\"         \n [75] \"scale_fill_stepsn\"          \"scale_fill_viridis_b\"      \n [77] \"scale_fill_viridis_c\"       \"scale_fill_viridis_d\"      \n [79] \"scale_linetype\"             \"scale_linetype_binned\"     \n [81] \"scale_linetype_continuous\"  \"scale_linetype_discrete\"   \n [83] \"scale_linetype_identity\"    \"scale_linetype_manual\"     \n [85] \"scale_linewidth\"            \"scale_linewidth_binned\"    \n [87] \"scale_linewidth_continuous\" \"scale_linewidth_date\"      \n [89] \"scale_linewidth_datetime\"   \"scale_linewidth_discrete\"  \n [91] \"scale_linewidth_identity\"   \"scale_linewidth_manual\"    \n [93] \"scale_linewidth_ordinal\"    \"scale_radius\"              \n [95] \"scale_shape\"                \"scale_shape_binned\"        \n [97] \"scale_shape_continuous\"     \"scale_shape_discrete\"      \n [99] \"scale_shape_identity\"       \"scale_shape_manual\"        \n[101] \"scale_shape_ordinal\"        \"scale_size\"                \n[103] \"scale_size_area\"            \"scale_size_binned\"         \n[105] \"scale_size_binned_area\"     \"scale_size_continuous\"     \n[107] \"scale_size_date\"            \"scale_size_datetime\"       \n[109] \"scale_size_discrete\"        \"scale_size_identity\"       \n[111] \"scale_size_manual\"          \"scale_size_ordinal\"        \n[113] \"scale_type\"                 \"scale_x_binned\"            \n[115] \"scale_x_continuous\"         \"scale_x_date\"              \n[117] \"scale_x_datetime\"           \"scale_x_discrete\"          \n[119] \"scale_x_log10\"              \"scale_x_reverse\"           \n[121] \"scale_x_sqrt\"               \"scale_x_time\"              \n[123] \"scale_y_binned\"             \"scale_y_continuous\"        \n[125] \"scale_y_date\"               \"scale_y_datetime\"          \n[127] \"scale_y_discrete\"           \"scale_y_log10\"             \n[129] \"scale_y_reverse\"            \"scale_y_sqrt\"              \n[131] \"scale_y_time\"              \n\n\n\n\n\n\n5.3.3.1 Escalas de cores\nO {ggplot2} utiliza uma paleta de cores padrão bem colorida, observada nos exemplos anteriores. Porém podemos mudar a paleta de cores, ou até mesmo criar uma paleta de cores personalizada.\nAs funções de escalas de cores dependerão do tipo de atributo estético utilizado: fill ou color.\nQuando usamos o atributo fill, utilizamos as funções scale_fill_*(). Quando usamos o atributo color, utilizamos as funções scale_color_*().\nOutro ponto importante é que as funções de escalas de cores dependem do tipo de variável que estamos mapeando.\nPor exemplo, se a variável mapeada é categórica, podemos usar a função scale_fill_viridis_d() para preencher as barras com uma paleta de cores viridis. Utilizando o exemplo que estamos criando, a região pode ser mapeada no atributo fill:\n\ndados_tri_recente |&gt; \n  ggplot() +\n  aes(y = uf, x = perc_desocupacao) +\n  geom_col(aes(fill = regiao)) +\n  scale_fill_viridis_d() \n\n\n\n\n\n\n\n\nMas se a variável mapeada é numérica, podemos usar a função scale_fill_viridis_c(). O exemplo abaixo apresenta um gráfico similar, mas mapeando a variável perc_desocupacao no atributo fill:\n\ndados_tri_recente |&gt; \n  ggplot() +\n  aes(y = uf, x = perc_desocupacao) +\n  geom_col(aes(fill = perc_desocupacao)) +\n  scale_fill_viridis_c()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLista de funções para escalas de cores no ggplot2\n\n\n\n\n\n\nPara o atributo color:\n\n\nls(\"package:ggplot2\") |&gt; \n  stringr::str_subset(\"^scale_\") |&gt; \n  stringr::str_subset(\"color\")\n\n [1] \"scale_color_binned\"     \"scale_color_brewer\"     \"scale_color_continuous\"\n [4] \"scale_color_date\"       \"scale_color_datetime\"   \"scale_color_discrete\"  \n [7] \"scale_color_distiller\"  \"scale_color_fermenter\"  \"scale_color_gradient\"  \n[10] \"scale_color_gradient2\"  \"scale_color_gradientn\"  \"scale_color_grey\"      \n[13] \"scale_color_hue\"        \"scale_color_identity\"   \"scale_color_manual\"    \n[16] \"scale_color_ordinal\"    \"scale_color_steps\"      \"scale_color_steps2\"    \n[19] \"scale_color_stepsn\"     \"scale_color_viridis_b\"  \"scale_color_viridis_c\" \n[22] \"scale_color_viridis_d\" \n\n\n\nPara o atributo fill:\n\n\nls(\"package:ggplot2\") |&gt; \n  stringr::str_subset(\"^scale_\") |&gt; \n  stringr::str_subset(\"fill\")\n\n [1] \"scale_fill_binned\"     \"scale_fill_brewer\"     \"scale_fill_continuous\"\n [4] \"scale_fill_date\"       \"scale_fill_datetime\"   \"scale_fill_discrete\"  \n [7] \"scale_fill_distiller\"  \"scale_fill_fermenter\"  \"scale_fill_gradient\"  \n[10] \"scale_fill_gradient2\"  \"scale_fill_gradientn\"  \"scale_fill_grey\"      \n[13] \"scale_fill_hue\"        \"scale_fill_identity\"   \"scale_fill_manual\"    \n[16] \"scale_fill_ordinal\"    \"scale_fill_steps\"      \"scale_fill_steps2\"    \n[19] \"scale_fill_stepsn\"     \"scale_fill_viridis_b\"  \"scale_fill_viridis_c\" \n[22] \"scale_fill_viridis_d\" \n\n\n\n\n\nUm ponto a ter atenção é o tipo de paleta de cores usadas. Algumas paletas de cores são mais adequadas para representar variáveis categóricas, enquanto outras são mais adequadas para representar variáveis numéricas. Veja a imagem com exemplos de paletas categóricas, sequenciais, e divergentes:\n\n\n\nFonte da imagem: tmap book.\n\n\n\n\n5.3.3.2 Escalas de eixos: datas\nPodemos customizar a escala do eixo x para apresentar as datas de forma personalizada. É importante que, para isso, a variável seja do tipo Date ou Datetime.\nPara isso, utilizamos a função scale_x_date(). Ela apresenta alguns argumentos importantes:\n\nbreaks: indica a frequência das marcações no eixo x. Alguns exemplos são: \"1 month\" (marcação a cada mês), \"3 months\" (marcação a cada 3 meses), “1 year” (marcação a cada ano), entre outros.\ndate_labels: formato da data que será apresentado. Alguns exemplos são: \"%m/%Y\" (mês/ano), \"%d/%m/%Y\" (dia/mês/ano), \"%b/%Y\" (mês abreviado/ano), entre outros.\n\nVamos criar um gráfico de linhas para visualizar a evolução da taxa de desocupação desde 2022 para a Bahia, e customizar a escala do eixo x para apresentar as datas de forma a apresentar uma marcação cada 3 meses:\n\ndados |&gt;\n1  filter(uf_sigla == \"SP\", ano &gt;= 2019) |&gt;\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_line() +\n  geom_point() +\n2  scale_x_date(\n3    breaks = \"6 months\",\n4    date_labels = \"%m/%Y\",\n5    minor_breaks = \"1 months\"\n  )\n\n\n1\n\nFiltrando os dados para o estado de São Paulo, e considerando apenas os dados a partir de 2019.\n\n2\n\nCustomizando a escala de data no eixo x.\n\n3\n\nQueremos que a marcação apareça a cada 3 meses.\n\n4\n\nFormato da data que será apresentado (mês/ano).\n\n5\n\nA minor break é uma linha que aparece entre as marcações principais, porém sem indicar uma legenda. Neste caso, queremos que apareça a cada mês.\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.3.3.3 Escalas de eixos: numérico\nPodemos customizar a escala dos eixos x e/ou y quando estamos mapeando variáveis numéricas utilizando as funções scale_x_continuous() e scale_y_continuous().\nO gráfico apresentado no exemplo anterior (onde configuramos a escala de datas) está com o eixo y limitado na faixa onde os dados são encontrados (11% à 18%). Porém, precisamos ter cuidado ao limitar os eixos, pois isso pode distorcer a visualização dos dados.\nPodemos definir que o eixo y comece em 0 e termine em 20%, utilizando o argumento limits da função scale_y_continuous():\n\ndados |&gt;\n  filter(uf_sigla == \"SP\", ano &gt;= 2019) |&gt;\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_line() +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 20))\n\n\n\n\n\n\n\n\n\n\n\n5.3.4 Temas\nOs gráficos que criamos até aqui utilizam o tema padrão do {ggplot2} (podemos identificar facilmente pelo fundo cinza).\nPorém existem funções para customizar o tema dos gráficos, alterando a cor de fundo, a cor dos textos, a fonte, entre outros elementos.\n\n5.3.4.1 {ggplot2}\nO {ggplot2} apresenta alguns temas que podem ser utilizados nos gráficos, utilizando funções com o prefixo theme_*():\n\nls(\"package:ggplot2\") |&gt; \n  stringr::str_subset(\"^theme_\") \n\n [1] \"theme_bw\"       \"theme_classic\"  \"theme_dark\"     \"theme_get\"     \n [5] \"theme_gray\"     \"theme_grey\"     \"theme_light\"    \"theme_linedraw\"\n [9] \"theme_minimal\"  \"theme_replace\"  \"theme_set\"      \"theme_test\"    \n[13] \"theme_update\"   \"theme_void\"    \n\n\nPor exemplo, podemos alterar o tema do gráfico grafico_ordenado (criado anteriormente) para o tema theme_minimal():\n\ngrafico_com_labels + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n5.3.4.2 {ggthemes}\nO pacote {ggthemes} apresenta vários temas adicionais que podem ser utilizados nos gráficos criados com o {ggplot2}.\n\n1install.packages(\"ggthemes\")\n\n\n1\n\nCaso não tenha o pacote instalado, utilize essa linha de código para instalar o pacote.\n\n\n\n\nA lista abaixo apresenta os temas disponíveis no pacote {ggthemes}:\n\nlibrary(ggthemes)\nls(\"package:ggthemes\") |&gt; \n  stringr::str_subset(\"^theme_\") \n\n [1] \"theme_base\"            \"theme_calc\"            \"theme_clean\"          \n [4] \"theme_economist\"       \"theme_economist_white\" \"theme_excel\"          \n [7] \"theme_excel_new\"       \"theme_few\"             \"theme_fivethirtyeight\"\n[10] \"theme_foundation\"      \"theme_gdocs\"           \"theme_hc\"             \n[13] \"theme_igray\"           \"theme_map\"             \"theme_pander\"         \n[16] \"theme_par\"             \"theme_solarized\"       \"theme_solarized_2\"    \n[19] \"theme_solid\"           \"theme_stata\"           \"theme_tufte\"          \n[22] \"theme_wsj\"            \n\n\nPodemos usar o tema theme_economist() para customizar o gráfico grafico_com_labels:\n\ngrafico_com_labels + \n  ggthemes::theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n5.3.5 Usando as funções de customização\nNos exemplos acima, apresentamos algumas funções para customizar os gráficos criados com o {ggplot2}.\nVamos usar essas funções para customizar o gráfico apresentado no exemplo acima:\n\n1grafico_customizado &lt;- dados |&gt;\n  filter(regiao == \"Sudeste\") |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao, color = uf) +  \n  geom_line() + \n2  theme_light() +\n3  scale_color_viridis_d(end = 0.9) +\n4  scale_x_date(breaks = \"1 year\", date_labels = \"%Y\") +\n5  labs(\n    title = \"Taxa de desocupação por estado na região Sudeste\",\n    subtitle = \"Dados da PNAD Contínua Trimestral\",\n    caption = \"Fonte dos dados: SIDRA/IBGE.\",\n    color = \"Estado\",\n    x = \"Ano\",\n    y = \"Taxa de desocupação (%)\"\n  )\n\ngrafico_customizado\n\n\n1\n\nVamos salvar o resultado do gráfico em um objeto.\n\n2\n\nUtilizando o tema theme_ipea() do pacote {ipeaplot}.\n\n3\n\nUtilizando a função scale_color_ipea() (do pacote {ipeaplot}) com paleta de cores Orange-Blue.\n\n4\n\nCustomizando a escala de data no eixo x: apresentar uma marcação a cada ano.\n\n5\n\nAdicionando títulos e rótulos ao gráfico.",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dia 2 - Customizando gráficos com ggplot2</span>"
    ]
  },
  {
    "objectID": "visualizacao/dia-2.html#salvando-os-gráficos",
    "href": "visualizacao/dia-2.html#salvando-os-gráficos",
    "title": "5  Dia 2 - Customizando gráficos com ggplot2",
    "section": "5.4 Salvando os gráficos",
    "text": "5.4 Salvando os gráficos\nPodemos salvar o gráfico em um arquivo, para utilizá-lo posteriormente. Para isso, criamos um objeto contendo o gráfico que queremos salvar, e utilizamos a função ggsave().\nA função ggsave() salva o gráfico em um arquivo, e apresenta dois argumentos principais:\n\nfilename: nome do arquivo onde o gráfico será salvo\nplot: objeto contendo o gráfico que será salvo\n\nEssa função também apresenta alguns argumentos para customizar como o gráfico será salvo, como:\n\nwidth: largura do gráfico\nheight: altura do gráfico\nunits: unidade de medida para a largura e altura do gráfico\ndpi: resolução do gráfico (quanto maior o valor, melhor a qualidade da imagem)\n\nVamos utilizar o gráfico customizado criado anteriormente (salvo no objeto grafico_customizado), e salvar em um arquivo utilizando a função ggsave():\n\n# fs::dir_create(\"graficos/\")\n1ggsave(\n2  filename = \"graficos/grafico_customizado.png\",\n3  plot = grafico_customizado,\n4  width = 7,\n5  height = 5,\n6  dpi = 300\n)\n\n\n1\n\nFunção para salvar o gráfico.\n\n2\n\nNome do arquivo onde o gráfico será salvo.\n\n3\n\nObjeto contendo o gráfico que será salvo.\n\n4\n\nLargura do gráfico.\n\n5\n\nAltura do gráfico.\n\n6\n\nResolução do gráfico.\n\n\n\n\nPodemos verificar se o gráfico foi salvo corretamente, utilizando a função file.exists():\n\nfile.exists(\"graficos/grafico_customizado.png\")\n\n[1] TRUE",
    "crumbs": [
      "Introdução à elaboração de gráficos com ggplot2 e R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dia 2 - Customizando gráficos com ggplot2</span>"
    ]
  }
]